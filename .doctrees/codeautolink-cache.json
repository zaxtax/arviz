{
  "about_us": [],
  "api/data": [],
  "api/diagnostics": [],
  "api/generated/arviz.ColumnDataSource": [
    {
      "source": "data = {'x': [1,2,3,4], 'y': np.array([10.0, 20.0, 30.0, 40.0])}\n\nsource = ColumnDataSource(data)",
      "names": [],
      "example": {
        "document": "api/generated/arviz.ColumnDataSource",
        "ref_id": "arviz-columndatasource",
        "headings": [
          "arviz.ColumnDataSource"
        ]
      }
    },
    {
      "source": "source = ColumnDataSource(df)",
      "names": [],
      "example": {
        "document": "api/generated/arviz.ColumnDataSource",
        "ref_id": "arviz-columndatasource",
        "headings": [
          "arviz.ColumnDataSource"
        ]
      }
    },
    {
      "source": "group = df.groupby(('colA', 'ColB'))",
      "names": [],
      "example": {
        "document": "api/generated/arviz.ColumnDataSource",
        "ref_id": "arviz-columndatasource",
        "headings": [
          "arviz.ColumnDataSource"
        ]
      }
    }
  ],
  "api/generated/arviz.Dask": [],
  "api/generated/arviz.InferenceData": [],
  "api/generated/arviz.InferenceData.__init__": [],
  "api/generated/arviz.InferenceData.add_groups": [],
  "api/generated/arviz.InferenceData.assign": [],
  "api/generated/arviz.InferenceData.assign_coords": [],
  "api/generated/arviz.InferenceData.chunk": [],
  "api/generated/arviz.InferenceData.compute": [],
  "api/generated/arviz.InferenceData.copy": [],
  "api/generated/arviz.InferenceData.cumsum": [],
  "api/generated/arviz.InferenceData.extend": [],
  "api/generated/arviz.InferenceData.from_netcdf": [],
  "api/generated/arviz.InferenceData.from_zarr": [],
  "api/generated/arviz.InferenceData.get": [],
  "api/generated/arviz.InferenceData.get_index": [],
  "api/generated/arviz.InferenceData.groups": [],
  "api/generated/arviz.InferenceData.isel": [],
  "api/generated/arviz.InferenceData.items": [],
  "api/generated/arviz.InferenceData.keys": [],
  "api/generated/arviz.InferenceData.load": [],
  "api/generated/arviz.InferenceData.map": [],
  "api/generated/arviz.InferenceData.max": [],
  "api/generated/arviz.InferenceData.mean": [],
  "api/generated/arviz.InferenceData.median": [],
  "api/generated/arviz.InferenceData.min": [],
  "api/generated/arviz.InferenceData.persist": [],
  "api/generated/arviz.InferenceData.quantile": [],
  "api/generated/arviz.InferenceData.rename": [],
  "api/generated/arviz.InferenceData.rename_dims": [],
  "api/generated/arviz.InferenceData.rename_vars": [],
  "api/generated/arviz.InferenceData.reset_coords": [],
  "api/generated/arviz.InferenceData.reset_index": [],
  "api/generated/arviz.InferenceData.sel": [],
  "api/generated/arviz.InferenceData.set_coords": [],
  "api/generated/arviz.InferenceData.set_index": [],
  "api/generated/arviz.InferenceData.sortby": [],
  "api/generated/arviz.InferenceData.stack": [],
  "api/generated/arviz.InferenceData.sum": [],
  "api/generated/arviz.InferenceData.to_dataframe": [],
  "api/generated/arviz.InferenceData.to_dict": [],
  "api/generated/arviz.InferenceData.to_json": [],
  "api/generated/arviz.InferenceData.to_netcdf": [],
  "api/generated/arviz.InferenceData.to_zarr": [],
  "api/generated/arviz.InferenceData.unify_chunks": [],
  "api/generated/arviz.InferenceData.unstack": [],
  "api/generated/arviz.InferenceData.values": [],
  "api/generated/arviz.Numba": [],
  "api/generated/arviz.PyStan2SamplingWrapper": [],
  "api/generated/arviz.PyStan2SamplingWrapper.__init__": [],
  "api/generated/arviz.PyStan2SamplingWrapper.check_implemented_methods": [],
  "api/generated/arviz.PyStan2SamplingWrapper.get_inference_data": [],
  "api/generated/arviz.PyStan2SamplingWrapper.log_likelihood__i": [],
  "api/generated/arviz.PyStan2SamplingWrapper.sample": [],
  "api/generated/arviz.PyStan2SamplingWrapper.sel_observations": [],
  "api/generated/arviz.PyStanSamplingWrapper": [],
  "api/generated/arviz.PyStanSamplingWrapper.__init__": [],
  "api/generated/arviz.PyStanSamplingWrapper.check_implemented_methods": [],
  "api/generated/arviz.PyStanSamplingWrapper.get_inference_data": [],
  "api/generated/arviz.PyStanSamplingWrapper.log_likelihood__i": [],
  "api/generated/arviz.PyStanSamplingWrapper.sample": [],
  "api/generated/arviz.PyStanSamplingWrapper.sel_observations": [],
  "api/generated/arviz.SamplingWrapper": [],
  "api/generated/arviz.SamplingWrapper.__init__": [],
  "api/generated/arviz.SamplingWrapper.check_implemented_methods": [],
  "api/generated/arviz.SamplingWrapper.get_inference_data": [],
  "api/generated/arviz.SamplingWrapper.log_likelihood__i": [],
  "api/generated/arviz.SamplingWrapper.sample": [],
  "api/generated/arviz.SamplingWrapper.sel_observations": [],
  "api/generated/arviz.apply_test_function": [
    {
      "source": ">>> import arviz as az\n>>> idata = az.load_arviz_data(\"centered_eight\")\n>>> az.apply_test_function(idata, lambda y, theta: np.min(y))\n>>> T = np.asscalar(idata.observed_data.T)\n>>> az.plot_posterior(idata, var_names=[\"T\"], group=\"posterior_predictive\", ref_val=T)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "apply_test_function"
          ],
          "code_str": "az.apply_test_function",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.apply_test_function"
        },
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.apply_test_function",
        "ref_id": "arviz-apply-test-function",
        "headings": [
          "arviz.apply_test_function"
        ]
      }
    }
  ],
  "api/generated/arviz.autocorr": [],
  "api/generated/arviz.autocov": [],
  "api/generated/arviz.bfmi": [],
  "api/generated/arviz.compare": [],
  "api/generated/arviz.concat": [],
  "api/generated/arviz.convert_to_dataset": [],
  "api/generated/arviz.convert_to_inference_data": [],
  "api/generated/arviz.create_layout": [],
  "api/generated/arviz.dict_to_dataset": [],
  "api/generated/arviz.ess": [],
  "api/generated/arviz.from_cmdstan": [],
  "api/generated/arviz.from_cmdstanpy": [],
  "api/generated/arviz.from_dict": [],
  "api/generated/arviz.from_emcee": [],
  "api/generated/arviz.from_json": [],
  "api/generated/arviz.from_netcdf": [],
  "api/generated/arviz.from_numpyro": [],
  "api/generated/arviz.from_pyjags": [],
  "api/generated/arviz.from_pymc3": [],
  "api/generated/arviz.from_pymc3_predictions": [],
  "api/generated/arviz.from_pyro": [],
  "api/generated/arviz.from_pystan": [],
  "api/generated/arviz.hdi": [],
  "api/generated/arviz.interactive_backend": [],
  "api/generated/arviz.kde": [
    {
      "source": ">>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from arviz import kde\n>>>\n>>> rvs = np.random.gamma(shape=1.8, size=1000)\n>>> grid, pdf = kde(rvs)\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "gamma"
          ],
          "code_str": "np.random.gamma",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.gamma"
        },
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      }
    },
    {
      "source": ">>> grid, pdf = kde(rvs, bw=\"silverman\")\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      }
    },
    {
      "source": ">>> # bw_fct > 1 means more smoothness.\n>>> grid, pdf = kde(rvs, bw_fct=2.5)\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      }
    },
    {
      "source": ">>> grid, pdf = kde(rvs, bound_correction=False, extend=True, extend_fct=0.5)\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      }
    },
    {
      "source": ">>> # It accepts tuples and lists of length 2.\n>>> grid, pdf = kde(rvs, bound_correction=False, custom_lims=(0, 10))\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      }
    },
    {
      "source": ">>> rvs = np.random.vonmises(mu=np.pi, kappa=1, size=500)\n>>> grid, pdf = kde(rvs, circular=True)\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "vonmises"
          ],
          "code_str": "np.random.vonmises",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.vonmises"
        },
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      }
    },
    {
      "source": ">>> rvs = np.random.vonmises(mu=np.pi, kappa=1, size=500)\n>>> # bw_fct > 1 means less smoothness.\n>>> grid, pdf = kde(rvs, circular=True, bw_fct=3)\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "vonmises"
          ],
          "code_str": "np.random.vonmises",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.vonmises"
        },
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      }
    },
    {
      "source": ">>> # This is still experimental, does not always work.\n>>> rvs = np.random.vonmises(mu=0, kappa=30, size=500)\n>>> grid, pdf = kde(rvs, circular=True, custom_lims=(-1, 1))\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "vonmises"
          ],
          "code_str": "np.random.vonmises",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.vonmises"
        },
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      }
    }
  ],
  "api/generated/arviz.labels.BaseLabeller": [],
  "api/generated/arviz.labels.BaseLabeller.__init__": [],
  "api/generated/arviz.labels.BaseLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.BaseLabeller.make_label_flat": [],
  "api/generated/arviz.labels.BaseLabeller.make_label_vert": [],
  "api/generated/arviz.labels.BaseLabeller.make_model_label": [],
  "api/generated/arviz.labels.BaseLabeller.make_pp_label": [],
  "api/generated/arviz.labels.BaseLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.BaseLabeller.sel_to_str": [],
  "api/generated/arviz.labels.BaseLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.BaseLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.DimCoordLabeller": [],
  "api/generated/arviz.labels.DimCoordLabeller.__init__": [],
  "api/generated/arviz.labels.DimCoordLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.DimCoordLabeller.make_label_flat": [],
  "api/generated/arviz.labels.DimCoordLabeller.make_label_vert": [],
  "api/generated/arviz.labels.DimCoordLabeller.make_model_label": [],
  "api/generated/arviz.labels.DimCoordLabeller.make_pp_label": [],
  "api/generated/arviz.labels.DimCoordLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.DimCoordLabeller.sel_to_str": [],
  "api/generated/arviz.labels.DimCoordLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.DimCoordLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.DimIdxLabeller": [],
  "api/generated/arviz.labels.DimIdxLabeller.__init__": [],
  "api/generated/arviz.labels.DimIdxLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.DimIdxLabeller.make_label_flat": [],
  "api/generated/arviz.labels.DimIdxLabeller.make_label_vert": [],
  "api/generated/arviz.labels.DimIdxLabeller.make_model_label": [],
  "api/generated/arviz.labels.DimIdxLabeller.make_pp_label": [],
  "api/generated/arviz.labels.DimIdxLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.DimIdxLabeller.sel_to_str": [],
  "api/generated/arviz.labels.DimIdxLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.DimIdxLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.IdxLabeller": [],
  "api/generated/arviz.labels.IdxLabeller.__init__": [],
  "api/generated/arviz.labels.IdxLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.IdxLabeller.make_label_flat": [],
  "api/generated/arviz.labels.IdxLabeller.make_label_vert": [],
  "api/generated/arviz.labels.IdxLabeller.make_model_label": [],
  "api/generated/arviz.labels.IdxLabeller.make_pp_label": [],
  "api/generated/arviz.labels.IdxLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.IdxLabeller.sel_to_str": [],
  "api/generated/arviz.labels.IdxLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.IdxLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.MapLabeller": [],
  "api/generated/arviz.labels.MapLabeller.__init__": [],
  "api/generated/arviz.labels.MapLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.MapLabeller.make_label_flat": [],
  "api/generated/arviz.labels.MapLabeller.make_label_vert": [],
  "api/generated/arviz.labels.MapLabeller.make_model_label": [],
  "api/generated/arviz.labels.MapLabeller.make_pp_label": [],
  "api/generated/arviz.labels.MapLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.MapLabeller.sel_to_str": [],
  "api/generated/arviz.labels.MapLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.MapLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.NoModelLabeller": [],
  "api/generated/arviz.labels.NoModelLabeller.__init__": [],
  "api/generated/arviz.labels.NoModelLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.NoModelLabeller.make_label_flat": [],
  "api/generated/arviz.labels.NoModelLabeller.make_label_vert": [],
  "api/generated/arviz.labels.NoModelLabeller.make_model_label": [],
  "api/generated/arviz.labels.NoModelLabeller.make_pp_label": [],
  "api/generated/arviz.labels.NoModelLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.NoModelLabeller.sel_to_str": [],
  "api/generated/arviz.labels.NoModelLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.NoModelLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.NoVarLabeller": [],
  "api/generated/arviz.labels.NoVarLabeller.__init__": [],
  "api/generated/arviz.labels.NoVarLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.NoVarLabeller.make_label_flat": [],
  "api/generated/arviz.labels.NoVarLabeller.make_label_vert": [],
  "api/generated/arviz.labels.NoVarLabeller.make_model_label": [],
  "api/generated/arviz.labels.NoVarLabeller.make_pp_label": [],
  "api/generated/arviz.labels.NoVarLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.NoVarLabeller.sel_to_str": [],
  "api/generated/arviz.labels.NoVarLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.NoVarLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.mix_labellers": [],
  "api/generated/arviz.list_datasets": [],
  "api/generated/arviz.load_arviz_data": [],
  "api/generated/arviz.loo": [],
  "api/generated/arviz.loo_pit": [],
  "api/generated/arviz.make_ufunc": [],
  "api/generated/arviz.mcse": [],
  "api/generated/arviz.output_file": [],
  "api/generated/arviz.output_notebook": [],
  "api/generated/arviz.plot_autocorr": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_autocorr(data)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_autocorr"
          ],
          "code_str": "az.plot_autocorr",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_autocorr"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_autocorr",
        "ref_id": "arviz-plot-autocorr",
        "headings": [
          "arviz.plot_autocorr"
        ]
      }
    },
    {
      "source": ">>> az.plot_autocorr(data, var_names=['mu', 'tau'] )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_autocorr"
          ],
          "code_str": "az.plot_autocorr",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_autocorr"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_autocorr",
        "ref_id": "arviz-plot-autocorr",
        "headings": [
          "arviz.plot_autocorr"
        ]
      }
    },
    {
      "source": ">>> az.plot_autocorr(data, var_names=['~thet'], filter_vars=\"like\", combined=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_autocorr"
          ],
          "code_str": "az.plot_autocorr",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_autocorr"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_autocorr",
        "ref_id": "arviz-plot-autocorr",
        "headings": [
          "arviz.plot_autocorr"
        ]
      }
    },
    {
      "source": ">>> az.plot_autocorr(data, var_names=['mu', 'tau'], max_lag=200, combined=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_autocorr"
          ],
          "code_str": "az.plot_autocorr",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_autocorr"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_autocorr",
        "ref_id": "arviz-plot-autocorr",
        "headings": [
          "arviz.plot_autocorr"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_bpv": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data(\"regression1d\")\n>>> az.plot_bpv(data, kind=\"p_value\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_bpv"
          ],
          "code_str": "az.plot_bpv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_bpv"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_bpv",
        "ref_id": "arviz-plot-bpv",
        "headings": [
          "arviz.plot_bpv"
        ]
      }
    },
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data(\"regression1d\")\n>>> az.plot_bpv(data, kind=\"t_stat\", t_stat=lambda x:np.percentile(x, q=50, axis=-1))",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_bpv"
          ],
          "code_str": "az.plot_bpv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_bpv"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_bpv",
        "ref_id": "arviz-plot-bpv",
        "headings": [
          "arviz.plot_bpv"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_compare": [
    {
      "source": ">>> import arviz as az\n>>> model_compare = az.compare({'Centered 8 schools': az.load_arviz_data('centered_eight'),\n>>>                  'Non-centered 8 schools': az.load_arviz_data('non_centered_eight')})\n>>> az.plot_compare(model_compare)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "compare"
          ],
          "code_str": "az.compare",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.compare"
        },
        {
          "import_components": [
            "arviz",
            "plot_compare"
          ],
          "code_str": "az.plot_compare",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_compare"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_compare",
        "ref_id": "arviz-plot-compare",
        "headings": [
          "arviz.plot_compare"
        ]
      }
    },
    {
      "source": ">>> az.plot_compare(model_compare, insample_dev=False)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_compare"
          ],
          "code_str": "az.plot_compare",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_compare"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_compare",
        "ref_id": "arviz-plot-compare",
        "headings": [
          "arviz.plot_compare"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_density": [
    {
      "source": ">>> import arviz as az\n>>> centered = az.load_arviz_data('centered_eight')\n>>> non_centered = az.load_arviz_data('non_centered_eight')\n>>> az.plot_density([centered, non_centered])",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      }
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], grid=(4, 5))",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      }
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], var_names=[\"mu\"])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      }
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], var_names=[\"mu\"], group=\"prior\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      }
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], var_names=[\"mu\"], hdi_prob=.5)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      }
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], var_names=[\"mu\"], outline=False, shade=.8)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      }
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], var_names=[\"mu\"], bw=.9)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_dist": [
    {
      "source": ">>> import numpy as np\n>>> import arviz as az\n>>> a = np.random.poisson(4, 1000)\n>>> az.plot_dist(a)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "poisson"
          ],
          "code_str": "np.random.poisson",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.poisson"
        },
        {
          "import_components": [
            "arviz",
            "plot_dist"
          ],
          "code_str": "az.plot_dist",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_dist"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist",
        "ref_id": "arviz-plot-dist",
        "headings": [
          "arviz.plot_dist"
        ]
      }
    },
    {
      "source": ">>> b = np.random.normal(0, 1, 1000)\n>>> az.plot_dist(b)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "plot_dist"
          ],
          "code_str": "az.plot_dist",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_dist"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist",
        "ref_id": "arviz-plot-dist",
        "headings": [
          "arviz.plot_dist"
        ]
      }
    },
    {
      "source": ">>> az.plot_dist(b, rug=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dist"
          ],
          "code_str": "az.plot_dist",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dist"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist",
        "ref_id": "arviz-plot-dist",
        "headings": [
          "arviz.plot_dist"
        ]
      }
    },
    {
      "source": ">>> az.plot_dist(b, rug=True, quantiles=[.25, .5, .75])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dist"
          ],
          "code_str": "az.plot_dist",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dist"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist",
        "ref_id": "arviz-plot-dist",
        "headings": [
          "arviz.plot_dist"
        ]
      }
    },
    {
      "source": ">>> az.plot_dist(b, rug=True, quantiles=[.25, .5, .75], cumulative=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dist"
          ],
          "code_str": "az.plot_dist",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dist"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist",
        "ref_id": "arviz-plot-dist",
        "headings": [
          "arviz.plot_dist"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_dist_comparison": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('rugby')\n>>> az.plot_dist_comparison(data, var_names=[\"defs\"], coords={\"team\" : [\"Italy\"]})",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_dist_comparison"
          ],
          "code_str": "az.plot_dist_comparison",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_dist_comparison"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist_comparison",
        "ref_id": "arviz-plot-dist-comparison",
        "headings": [
          "arviz.plot_dist_comparison"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_dot": [
    {
      "source": ">>> import arviz as az\n>>> import numpy as np\n>>> values = np.random.normal(0, 1, 500)\n>>> az.plot_dot(values)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "plot_dot"
          ],
          "code_str": "az.plot_dot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_dot"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dot",
        "ref_id": "arviz-plot-dot",
        "headings": [
          "arviz.plot_dot"
        ]
      }
    },
    {
      "source": ">>> az.plot_dot(values, nquantiles=100)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dot"
          ],
          "code_str": "az.plot_dot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dot"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dot",
        "ref_id": "arviz-plot-dot",
        "headings": [
          "arviz.plot_dot"
        ]
      }
    },
    {
      "source": ">>> az.plot_dot(values, point_interval=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dot"
          ],
          "code_str": "az.plot_dot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dot"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dot",
        "ref_id": "arviz-plot-dot",
        "headings": [
          "arviz.plot_dot"
        ]
      }
    },
    {
      "source": ">>> az.plot_dot(values, point_interval=True, rotated=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dot"
          ],
          "code_str": "az.plot_dot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dot"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dot",
        "ref_id": "arviz-plot-dot",
        "headings": [
          "arviz.plot_dot"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_elpd": [
    {
      "source": ">>> import arviz as az\n>>> idata1 = az.load_arviz_data(\"centered_eight\")\n>>> idata2 = az.load_arviz_data(\"non_centered_eight\")\n>>> az.plot_elpd(\n>>>     {\"centered model\": idata1, \"non centered model\": idata2},\n>>>     xlabels=True\n>>> )",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_elpd"
          ],
          "code_str": "az.plot_elpd",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_elpd"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_elpd",
        "ref_id": "arviz-plot-elpd",
        "headings": [
          "arviz.plot_elpd"
        ]
      }
    },
    {
      "source": "import arviz as az\nidata1 = az.load_arviz_data(\"centered_eight\")\nidata2 = az.load_arviz_data(\"non_centered_eight\")\naz.plot_elpd(\n    {\"centered model\": idata1, \"non centered model\": idata2},\n    backend=\"bokeh\"\n)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_elpd"
          ],
          "code_str": "az.plot_elpd",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_elpd"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_elpd",
        "ref_id": "arviz-plot-elpd",
        "headings": [
          "arviz.plot_elpd"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_energy": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_energy(data)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_energy"
          ],
          "code_str": "az.plot_energy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_energy"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_energy",
        "ref_id": "arviz-plot-energy",
        "headings": [
          "arviz.plot_energy"
        ]
      }
    },
    {
      "source": ">>> az.plot_energy(data, kind='hist')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_energy"
          ],
          "code_str": "az.plot_energy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_energy"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_energy",
        "ref_id": "arviz-plot-energy",
        "headings": [
          "arviz.plot_energy"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_ess": [
    {
      "source": ">>> import arviz as az\n>>> idata = az.load_arviz_data(\"centered_eight\")\n>>> coords = {\"school\": [\"Choate\", \"Lawrenceville\"]}\n>>> az.plot_ess(\n...     idata, kind=\"local\", var_names=[\"mu\", \"theta\"], coords=coords\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_ess"
          ],
          "code_str": "az.plot_ess",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ess",
        "ref_id": "arviz-plot-ess",
        "headings": [
          "arviz.plot_ess"
        ]
      }
    },
    {
      "source": ">>> az.plot_ess(\n...     idata, kind=\"quantile\", var_names=['~thet'], filter_vars=\"like\", coords=coords\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ess"
          ],
          "code_str": "az.plot_ess",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ess",
        "ref_id": "arviz-plot-ess",
        "headings": [
          "arviz.plot_ess"
        ]
      }
    },
    {
      "source": ">>> az.plot_ess(\n...     idata, kind=\"evolution\", var_names=[\"mu\", \"theta\"], coords=coords\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ess"
          ],
          "code_str": "az.plot_ess",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ess",
        "ref_id": "arviz-plot-ess",
        "headings": [
          "arviz.plot_ess"
        ]
      }
    },
    {
      "source": ">>> az.plot_ess(\n...     idata, kind=\"local\", var_names=[\"mu\"], drawstyle=\"steps-mid\", color=\"k\",\n...     linestyle=\"-\", marker=None, rug=True, rug_kwargs={\"color\": \"r\"}\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ess"
          ],
          "code_str": "az.plot_ess",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ess",
        "ref_id": "arviz-plot-ess",
        "headings": [
          "arviz.plot_ess"
        ]
      }
    },
    {
      "source": ">>> extra_kwargs = {\"color\": \"lightsteelblue\"}\n>>> az.plot_ess(\n...     idata, kind=\"evolution\", var_names=[\"mu\"],\n...     color=\"royalblue\", extra_kwargs=extra_kwargs\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ess"
          ],
          "code_str": "az.plot_ess",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ess",
        "ref_id": "arviz-plot-ess",
        "headings": [
          "arviz.plot_ess"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_forest": [
    {
      "source": ">>> import arviz as az\n>>> non_centered_data = az.load_arviz_data('non_centered_eight')\n>>> axes = az.plot_forest(non_centered_data,\n>>>                            kind='forestplot',\n>>>                            var_names=[\"^the\"],\n>>>                            filter_vars=\"regex\",\n>>>                            combined=True,\n>>>                            figsize=(9, 7))\n>>> axes[0].set_title('Estimated theta for 8 schools model')",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_forest",
        "ref_id": "arviz-plot-forest",
        "headings": [
          "arviz.plot_forest"
        ]
      }
    },
    {
      "source": ">>> centered_data = az.load_arviz_data('centered_eight')\n>>> axes = az.plot_forest([non_centered_data, centered_data],\n>>>                            model_names = [\"non centered eight\", \"centered eight\"],\n>>>                            kind='forestplot',\n>>>                            var_names=[\"^the\"],\n>>>                            filter_vars=\"regex\",\n>>>                            combined=True,\n>>>                            figsize=(9, 7))\n>>> axes[0].set_title('Estimated theta for 8 schools models')",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_forest",
        "ref_id": "arviz-plot-forest",
        "headings": [
          "arviz.plot_forest"
        ]
      }
    },
    {
      "source": ">>> rope = {'theta': [{'school': 'Choate', 'rope': (2, 4)}], 'mu': [{'rope': (-2, 2)}]}\n>>> axes = az.plot_forest(non_centered_data,\n>>>                            rope=rope,\n>>>                            var_names='~tau',\n>>>                            combined=True,\n>>>                            figsize=(9, 7))\n>>> axes[0].set_title('Estimated theta for 8 schools model')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_forest",
        "ref_id": "arviz-plot-forest",
        "headings": [
          "arviz.plot_forest"
        ]
      }
    },
    {
      "source": ">>> axes = az.plot_forest(non_centered_data,\n>>>                            kind='ridgeplot',\n>>>                            var_names=['theta'],\n>>>                            combined=True,\n>>>                            ridgeplot_overlap=3,\n>>>                            colors='white',\n>>>                            figsize=(9, 7))\n>>> axes[0].set_title('Estimated theta for 8 schools model')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_forest",
        "ref_id": "arviz-plot-forest",
        "headings": [
          "arviz.plot_forest"
        ]
      }
    },
    {
      "source": ">>> axes = az.plot_forest(non_centered_data,\n>>>                            kind='ridgeplot',\n>>>                            var_names=['theta'],\n>>>                            combined=True,\n>>>                            ridgeplot_truncate=False,\n>>>                            ridgeplot_quantiles=[.25, .5, .75],\n>>>                            ridgeplot_overlap=0.7,\n>>>                            colors='white',\n>>>                            figsize=(9, 7))\n>>> axes[0].set_title('Estimated theta for 8 schools model')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_forest",
        "ref_id": "arviz-plot-forest",
        "headings": [
          "arviz.plot_forest"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_hdi": [
    {
      "source": ">>> import numpy as np\n>>> import arviz as az\n>>> x_data = np.random.normal(0, 1, 100)\n>>> y_data = np.random.normal(2 + x_data * 0.5, 0.5, size=(2, 50, 100))\n>>> az.plot_hdi(x_data, y_data)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_hdi",
        "ref_id": "arviz-plot-hdi",
        "headings": [
          "arviz.plot_hdi"
        ]
      }
    },
    {
      "source": ">>> hdi_data = az.hdi(y_data, input_core_dims=[[\"draw\"]])\n>>> ax = az.plot_hdi(x_data, hdi_data=hdi_data[0], color=\"r\", fill_kwargs={\"alpha\": .2})\n>>> az.plot_hdi(x_data, hdi_data=hdi_data[1], color=\"k\", ax=ax, fill_kwargs={\"alpha\": .2})",
      "names": [
        {
          "import_components": [
            "arviz",
            "hdi"
          ],
          "code_str": "az.hdi",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.hdi"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_hdi",
        "ref_id": "arviz-plot-hdi",
        "headings": [
          "arviz.plot_hdi"
        ]
      }
    },
    {
      "source": ">>> X = np.random.normal(0,1,100)\n>>> Y = np.random.normal(2 + X * 0.5, 0.5, size=(2,10,100))\n>>> idata = az.from_dict(posterior={\"y\": Y}, constant_data={\"x\":X})\n>>> x_data = idata.constant_data.x\n>>> y_data = idata.posterior.y\n>>> az.plot_hdi(x_data, y_data)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_hdi",
        "ref_id": "arviz-plot-hdi",
        "headings": [
          "arviz.plot_hdi"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_kde": [
    {
      "source": ">>> import arviz as az\n>>> non_centered = az.load_arviz_data('non_centered_eight')\n>>> mu_posterior = np.concatenate(non_centered.posterior[\"mu\"].values)\n>>> tau_posterior = np.concatenate(non_centered.posterior[\"tau\"].values)\n>>> az.plot_kde(mu_posterior)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, rug=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, adaptive=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, bw=\"scott\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, bw=0.4)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> rvs = np.random.vonmises(mu=np.pi, kappa=2, size=500)\n>>> az.plot_kde(rvs, is_circular=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, cumulative=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, rotated=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, values2=tau_posterior)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, values2=tau_posterior,\n...             contour_kwargs={\"colors\":None, \"cmap\":plt.cm.viridis},\n...             contourf_kwargs={\"alpha\":0});",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(\n...     mu_posterior, values2=tau_posterior,\n...     contour_kwargs={\"levels\":3}, contourf_kwargs={\"levels\":3}\n... );",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, values2=tau_posterior, hdi_probs=[0.3, 0.6, 0.9])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, values2=tau_posterior, contour=False)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_khat": [
    {
      "source": ">>> import arviz as az\n>>> radon = az.load_arviz_data(\"radon\")\n>>> loo_radon = az.loo(radon, pointwise=True)\n>>> az.plot_khat(loo_radon, show_bins=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.loo"
        },
        {
          "import_components": [
            "arviz",
            "plot_khat"
          ],
          "code_str": "az.plot_khat",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_khat"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_khat",
        "ref_id": "arviz-plot-khat",
        "headings": [
          "arviz.plot_khat"
        ]
      }
    },
    {
      "source": ">>> centered_eight = az.load_arviz_data(\"centered_eight\")\n>>> khats = az.loo(centered_eight, pointwise=True).pareto_k\n>>> az.plot_khat(khats, xlabels=True, threshold=1)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.loo"
        },
        {
          "import_components": [
            "arviz",
            "plot_khat"
          ],
          "code_str": "az.plot_khat",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_khat"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_khat",
        "ref_id": "arviz-plot-khat",
        "headings": [
          "arviz.plot_khat"
        ]
      }
    },
    {
      "source": ">>> counties = radon.posterior.County[radon.constant_data.county_idx].values\n>>> colors = [\n...     \"blue\" if county[-1] in (\"A\", \"N\") else \"green\" for county in counties\n... ]\n>>> az.plot_khat(loo_radon, color=colors)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_khat"
          ],
          "code_str": "az.plot_khat",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.plot_khat"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_khat",
        "ref_id": "arviz-plot-khat",
        "headings": [
          "arviz.plot_khat"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_lm": [
    {
      "source": ">>> import arviz as az\n>>> import numpy as np\n>>> import xarray as xr\n>>> idata = az.load_arviz_data('regression1d')\n>>> x = xr.DataArray(np.linspace(0, 1, 100))\n>>> idata.posterior[\"y_model\"] = idata.posterior[\"intercept\"] + idata.posterior[\"slope\"]*x\n>>> az.plot_lm(idata=idata, y=\"y\", x=x)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "arviz",
            "plot_lm"
          ],
          "code_str": "az.plot_lm",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "arviz.plot_lm"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_lm",
        "ref_id": "arviz-plot-lm",
        "headings": [
          "arviz.plot_lm"
        ]
      }
    },
    {
      "source": ">>> az.plot_lm(idata=idata, y=\"y\", x=x, y_model=\"y_model\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_lm"
          ],
          "code_str": "az.plot_lm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_lm"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_lm",
        "ref_id": "arviz-plot-lm",
        "headings": [
          "arviz.plot_lm"
        ]
      }
    },
    {
      "source": ">>> az.plot_lm(\n...     idata=idata, y=\"y\", x=x, y_model=\"y_model\", kind_pp=\"hdi\", kind_model=\"hdi\"\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_lm"
          ],
          "code_str": "az.plot_lm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_lm"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_lm",
        "ref_id": "arviz-plot-lm",
        "headings": [
          "arviz.plot_lm"
        ]
      }
    },
    {
      "source": ">>> data = az.from_dict(\n...     observed_data = { \"y\": np.random.normal(size=(5, 7)) },\n...     posterior_predictive = {\"y\": np.random.randn(4, 1000, 5, 7) / 2},\n...     dims={\"y\": [\"dim1\", \"dim2\"]},\n...     coords={\"dim1\": range(5), \"dim2\": range(7)}\n... )\n>>> az.plot_lm(idata=data, y=\"y\", plot_dim=\"dim1\")",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        },
        {
          "import_components": [
            "arviz",
            "plot_lm"
          ],
          "code_str": "az.plot_lm",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "arviz.plot_lm"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_lm",
        "ref_id": "arviz-plot-lm",
        "headings": [
          "arviz.plot_lm"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_loo_pit": [
    {
      "source": ">>> import arviz as az\n>>> idata = az.load_arviz_data(\"radon\")\n>>> az.plot_loo_pit(idata=idata, y=\"y\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_loo_pit"
          ],
          "code_str": "az.plot_loo_pit",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_loo_pit"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_loo_pit",
        "ref_id": "arviz-plot-loo-pit",
        "headings": [
          "arviz.plot_loo_pit"
        ]
      }
    },
    {
      "source": ">>> az.plot_loo_pit(idata=idata, y=\"y\", ecdf=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_loo_pit"
          ],
          "code_str": "az.plot_loo_pit",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_loo_pit"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_loo_pit",
        "ref_id": "arviz-plot-loo-pit",
        "headings": [
          "arviz.plot_loo_pit"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_mcse": [
    {
      "source": ">>> import arviz as az\n>>> idata = az.load_arviz_data(\"centered_eight\")\n>>> coords = {\"school\": [\"Deerfield\", \"Lawrenceville\"]}\n>>> az.plot_mcse(\n...     idata, var_names=[\"mu\", \"theta\"], coords=coords\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_mcse"
          ],
          "code_str": "az.plot_mcse",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_mcse"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_mcse",
        "ref_id": "arviz-plot-mcse",
        "headings": [
          "arviz.plot_mcse"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_pair": [
    {
      "source": ">>> import arviz as az\n>>> centered = az.load_arviz_data('centered_eight')\n>>> coords = {'school': ['Choate', 'Deerfield']}\n>>> az.plot_pair(centered,\n>>>             var_names=['theta', 'mu', 'tau'],\n>>>             kind='kde',\n>>>             coords=coords,\n>>>             divergences=True,\n>>>             textsize=18)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_pair"
          ],
          "code_str": "az.plot_pair",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_pair"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_pair",
        "ref_id": "arviz-plot-pair",
        "headings": [
          "arviz.plot_pair"
        ]
      }
    },
    {
      "source": ">>> az.plot_pair(centered,\n>>>             var_names=['theta', 'mu'],\n>>>             coords=coords,\n>>>             textsize=18,\n>>>             kind='hexbin')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_pair"
          ],
          "code_str": "az.plot_pair",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_pair"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_pair",
        "ref_id": "arviz-plot-pair",
        "headings": [
          "arviz.plot_pair"
        ]
      }
    },
    {
      "source": ">>> az.plot_pair(centered,\n...             var_names=['^t', 'mu'],\n...             filter_vars=\"regex\",\n...             coords=coords,\n...             divergences=True,\n...             textsize=18)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_pair"
          ],
          "code_str": "az.plot_pair",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_pair"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_pair",
        "ref_id": "arviz-plot-pair",
        "headings": [
          "arviz.plot_pair"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_parallel": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_parallel(data, var_names=[\"mu\", \"tau\"])",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_parallel"
          ],
          "code_str": "az.plot_parallel",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_parallel"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_parallel",
        "ref_id": "arviz-plot-parallel",
        "headings": [
          "arviz.plot_parallel"
        ]
      }
    },
    {
      "source": ">>> az.plot_parallel(data, var_names=[\"mu\", \"tau\"], norm_method='normal')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_parallel"
          ],
          "code_str": "az.plot_parallel",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_parallel"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_parallel",
        "ref_id": "arviz-plot-parallel",
        "headings": [
          "arviz.plot_parallel"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_posterior": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_posterior(data)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu'])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu', '^the'], filter_vars=\"regex\", rope=(-1, 1))",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    },
    {
      "source": ">>> rope = {'mu': [{'rope': (-2, 2)}], 'theta': [{'school': 'Choate', 'rope': (2, 4)}]}\n>>> az.plot_posterior(data, var_names=['mu', 'theta'], rope=rope)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    },
    {
      "source": ">>> coords = {\"school\": [\"Choate\",\"Phillips Exeter\"]}\n>>> az.plot_posterior(data, var_names=[\"mu\", \"theta\"], coords=coords)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu', 'theta'], ref_val=0)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu', 'theta'], point_estimate='mode')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    },
    {
      "source": ">>> az.plot_posterior(data, ref_val= {\"theta\": [{\"school\": \"Deerfield\", \"ref_val\": 4},\n...                                             {\"school\": \"Choate\", \"ref_val\": 3}]})",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    },
    {
      "source": ">>> az.plot_posterior(data, ref_val=[1] + [5] * 8 + [1])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu'], kind='hist')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu'], hdi_prob=.75)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_ppc": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('radon')\n>>> az.plot_ppc(data, data_pairs={\"y\":\"y\"})",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ppc",
        "ref_id": "arviz-plot-ppc",
        "headings": [
          "arviz.plot_ppc"
        ]
      }
    },
    {
      "source": ">>> az.plot_ppc(data, kind='cumulative')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ppc",
        "ref_id": "arviz-plot-ppc",
        "headings": [
          "arviz.plot_ppc"
        ]
      }
    },
    {
      "source": ">>> obs_county = data.posterior[\"County\"][data.constant_data[\"county_idx\"]]\n>>> data = data.assign_coords(obs_id=obs_county, groups=\"observed_vars\")\n>>> az.plot_ppc(data, coords={'obs_id': ['ANOKA', 'BELTRAMI']}, flatten=[])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ppc",
        "ref_id": "arviz-plot-ppc",
        "headings": [
          "arviz.plot_ppc"
        ]
      }
    },
    {
      "source": ">>> az.plot_ppc(data, kind='scatter', flatten=[],\n>>>             coords={'obs_id': ['AITKIN', 'BELTRAMI']})",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ppc",
        "ref_id": "arviz-plot-ppc",
        "headings": [
          "arviz.plot_ppc"
        ]
      }
    },
    {
      "source": ">>> az.plot_ppc(data, num_pp_samples=30, random_seed=7)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ppc",
        "ref_id": "arviz-plot-ppc",
        "headings": [
          "arviz.plot_ppc"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_rank": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_rank(data)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_rank"
          ],
          "code_str": "az.plot_rank",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_rank"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_rank",
        "ref_id": "arviz-plot-rank",
        "headings": [
          "arviz.plot_rank"
        ]
      }
    },
    {
      "source": ">>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_rank(data, var_names='tau')",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_rank"
          ],
          "code_str": "az.plot_rank",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_rank"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_rank",
        "ref_id": "arviz-plot-rank",
        "headings": [
          "arviz.plot_rank"
        ]
      }
    },
    {
      "source": ">>> import matplotlib.pyplot as plt\n>>> centered_data = az.load_arviz_data('centered_eight')\n>>> noncentered_data = az.load_arviz_data('non_centered_eight')\n>>> _, ax = plt.subplots(1, 2, figsize=(12, 3))\n>>> az.plot_rank(centered_data, var_names=\"mu\", kind='vlines', ax=ax[0])\n>>> az.plot_rank(noncentered_data, var_names=\"mu\", kind='vlines', ax=ax[1])",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "arviz",
            "plot_rank"
          ],
          "code_str": "az.plot_rank",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.plot_rank"
        },
        {
          "import_components": [
            "arviz",
            "plot_rank"
          ],
          "code_str": "az.plot_rank",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.plot_rank"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_rank",
        "ref_id": "arviz-plot-rank",
        "headings": [
          "arviz.plot_rank"
        ]
      }
    },
    {
      "source": ">>> az.plot_rank(noncentered_data, var_names=\"mu\", kind=\"vlines\",\n>>>              vlines_kwargs={'lw':0}, marker_vlines_kwargs={'lw':3});",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_rank"
          ],
          "code_str": "az.plot_rank",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_rank"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_rank",
        "ref_id": "arviz-plot-rank",
        "headings": [
          "arviz.plot_rank"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_separation": [
    {
      "source": ">>> import arviz as az\n>>> idata = az.load_arviz_data('classification10d')\n>>> az.plot_separation(idata=idata, y='outcome', y_hat='outcome', figsize=(8, 1))",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_separation"
          ],
          "code_str": "az.plot_separation",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_separation"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_separation",
        "ref_id": "arviz-plot-separation",
        "headings": [
          "arviz.plot_separation"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_trace": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('non_centered_eight')\n>>> coords = {'school': ['Choate', 'Lawrenceville']}\n>>> az.plot_trace(data, var_names=('theta'), filter_vars=\"like\", coords=coords)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_trace",
        "ref_id": "arviz-plot-trace",
        "headings": [
          "arviz.plot_trace"
        ]
      }
    },
    {
      "source": ">>> az.plot_trace(data, compact=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_trace",
        "ref_id": "arviz-plot-trace",
        "headings": [
          "arviz.plot_trace"
        ]
      }
    },
    {
      "source": ">>> az.plot_trace(data, var_names=[\"mu\", \"tau\"], kind=\"rank_bars\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_trace",
        "ref_id": "arviz-plot-trace",
        "headings": [
          "arviz.plot_trace"
        ]
      }
    },
    {
      "source": ">>> az.plot_trace(\n>>>     data, var_names=('^theta'), filter_vars=\"regex\", coords=coords, combined=True\n>>> )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_trace",
        "ref_id": "arviz-plot-trace",
        "headings": [
          "arviz.plot_trace"
        ]
      }
    },
    {
      "source": ">>> lines = (('theta_t',{'school': \"Choate\"}, [-1]),)\n>>> az.plot_trace(data, var_names=('theta_t', 'theta'), coords=coords, lines=lines)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_trace",
        "ref_id": "arviz-plot-trace",
        "headings": [
          "arviz.plot_trace"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_ts": [
    {
      "source": ">>> import arviz as az\n>>> nchains, ndraws = (4, 500)\n>>> obs_data = {\n...     \"y\": 2 * np.arange(1, 9) + 3,\n...     \"z\": 2 * np.arange(8, 12) + 3,\n... }\n>>> posterior_predictive = {\n...     \"y\": np.random.normal(\n...         (obs_data[\"y\"] * 1.2) - 3, size=(nchains, ndraws, len(obs_data[\"y\"]))\n...     ),\n...     \"z\": np.random.normal(\n...         (obs_data[\"z\"] * 1.2) - 3, size=(nchains, ndraws, len(obs_data[\"z\"]))\n...     ),\n...  }\n>>> idata = az.from_dict(\n...     observed_data=obs_data,\n...     posterior_predictive=posterior_predictive,\n...     coords={\"obs_dim\": np.arange(1, 9), \"pred_dim\": np.arange(8, 12)},\n...     dims={\"y\": [\"obs_dim\"], \"z\": [\"pred_dim\"]},\n... )\n>>> ax = az.plot_ts(idata=idata, y=\"y\", y_holdout=\"z\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        },
        {
          "import_components": [
            "arviz",
            "plot_ts"
          ],
          "code_str": "az.plot_ts",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "arviz.plot_ts"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ts",
        "ref_id": "arviz-plot-ts",
        "headings": [
          "arviz.plot_ts"
        ]
      }
    },
    {
      "source": ">>> ndim1, ndim2 = (5, 7)\n>>> data = {\n...     \"y\": np.random.normal(size=(ndim1, ndim2)),\n...     \"z\": np.random.normal(size=(ndim1, ndim2)),\n... }\n>>> posterior_predictive = {\n...     \"y\": np.random.randn(nchains, ndraws, ndim1, ndim2),\n...     \"z\": np.random.randn(nchains, ndraws, ndim1, ndim2),\n... }\n>>> const_data = {\"x\": np.arange(1, 6), \"x_pred\": np.arange(5, 10)}\n>>> idata = az.from_dict(\n...     observed_data=data,\n...     posterior_predictive=posterior_predictive,\n...     constant_data=const_data,\n...     dims={\n...         \"y\": [\"dim1\", \"dim2\"],\n...         \"z\": [\"holdout_dim1\", \"holdout_dim2\"],\n...     },\n...     coords={\n...         \"dim1\": range(ndim1),\n...         \"dim2\": range(ndim2),\n...         \"holdout_dim1\": range(ndim1 - 1, ndim1 + 4),\n...         \"holdout_dim2\": range(ndim2 - 1, ndim2 + 6),\n...     },\n... )\n>>> az.plot_ts(\n...     idata=idata,\n...     y=\"y\",\n...     plot_dim=\"dim1\",\n...     y_holdout=\"z\",\n...     holdout_dim=\"holdout_dim1\",\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        },
        {
          "import_components": [
            "arviz",
            "plot_ts"
          ],
          "code_str": "az.plot_ts",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "arviz.plot_ts"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ts",
        "ref_id": "arviz-plot-ts",
        "headings": [
          "arviz.plot_ts"
        ]
      }
    }
  ],
  "api/generated/arviz.plot_violin": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_violin(data)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_violin"
          ],
          "code_str": "az.plot_violin",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_violin"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_violin",
        "ref_id": "arviz-plot-violin",
        "headings": [
          "arviz.plot_violin"
        ]
      }
    }
  ],
  "api/generated/arviz.psislw": [],
  "api/generated/arviz.r2_score": [],
  "api/generated/arviz.rc_context": [],
  "api/generated/arviz.reloo": [],
  "api/generated/arviz.rhat": [],
  "api/generated/arviz.sel_utils.xarray_sel_iter": [],
  "api/generated/arviz.sel_utils.xarray_to_ndarray": [],
  "api/generated/arviz.sel_utils.xarray_var_iter": [],
  "api/generated/arviz.show_layout": [],
  "api/generated/arviz.summary": [],
  "api/generated/arviz.to_cds": [],
  "api/generated/arviz.to_netcdf": [],
  "api/generated/arviz.waic": [],
  "api/generated/arviz.wrap_xarray_ufunc": [],
  "api/index": [],
  "api/inference_data": [],
  "api/plot_utils": [],
  "api/plots": [],
  "api/rcparams": [],
  "api/stats": [],
  "api/stats_refitting": [],
  "api/stats_utils": [],
  "api/utils": [],
  "api/wrappers": [],
  "community": [],
  "contributing/contributing_prs": [],
  "contributing/developer_guide": [],
  "contributing/developing_in_docker": [],
  "contributing/index": [],
  "contributing/issue_reports": [],
  "contributing/issue_triaging": [],
  "contributing/outreach": [],
  "contributing/review_prs": [],
  "core_contributors": [],
  "examples/index": [],
  "examples/plot_autocorr": [],
  "examples/plot_bpv": [],
  "examples/plot_bpv_tstat": [],
  "examples/plot_compare": [],
  "examples/plot_density": [],
  "examples/plot_dist": [],
  "examples/plot_dot": [],
  "examples/plot_elpd": [],
  "examples/plot_energy": [],
  "examples/plot_ess_evolution": [],
  "examples/plot_ess_local": [],
  "examples/plot_ess_quantile": [],
  "examples/plot_forest": [],
  "examples/plot_forest_ridge": [],
  "examples/plot_hdi": [],
  "examples/plot_joint": [],
  "examples/plot_kde": [],
  "examples/plot_kde_2d": [],
  "examples/plot_kde_2d_bis": [],
  "examples/plot_kde_2d_hdi": [],
  "examples/plot_kde_quantiles": [],
  "examples/plot_khat": [],
  "examples/plot_lm": [],
  "examples/plot_loo_pit_ecdf": [],
  "examples/plot_loo_pit_overlay": [],
  "examples/plot_mcse": [],
  "examples/plot_mcse_errorbar": [],
  "examples/plot_pair": [],
  "examples/plot_pair_hex": [],
  "examples/plot_pair_kde": [],
  "examples/plot_pair_kde_hdi": [],
  "examples/plot_pair_point_estimate": [],
  "examples/plot_parallel": [],
  "examples/plot_parallel_minmax": [],
  "examples/plot_parallel_normal": [],
  "examples/plot_parallel_rank": [],
  "examples/plot_posterior": [],
  "examples/plot_ppc": [],
  "examples/plot_ppc_cumulative": [],
  "examples/plot_rank": [],
  "examples/plot_separation": [],
  "examples/plot_trace": [],
  "examples/plot_trace_bars": [],
  "examples/plot_trace_circ": [],
  "examples/plot_trace_vlines": [],
  "examples/plot_violin": [],
  "examples/styles": [],
  "external_resources": [],
  "getting_started/ConversionGuideEmcee": [
    {
      "source": "import arviz as az\nimport numpy as np\nimport emcee",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "converting-emcee-objects-to-inferencedata",
        "headings": [
          "Converting emcee objects to InferenceData"
        ]
      }
    },
    {
      "source": "az.style.use(\"arviz-darkgrid\")",
      "names": [],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "converting-emcee-objects-to-inferencedata",
        "headings": [
          "Converting emcee objects to InferenceData"
        ]
      }
    },
    {
      "source": "J = 8\ny_obs = np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0])\nsigma = np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "converting-emcee-objects-to-inferencedata",
        "headings": [
          "Converting emcee objects to InferenceData"
        ]
      }
    },
    {
      "source": "def log_prior_8school(theta):\n    mu, tau, eta = theta[0], theta[1], theta[2:]\n    # Half-cauchy prior, hwhm=25\n    if tau < 0:\n        return -np.inf\n    prior_tau = -np.log(tau ** 2 + 25 ** 2)\n    prior_mu = -(mu / 10) ** 2  # normal prior, loc=0, scale=10\n    prior_eta = -np.sum(eta ** 2)  # normal prior, loc=0, scale=1\n    return prior_mu + prior_tau + prior_eta\n\ndef log_likelihood_8school(theta, y, s):\n    mu, tau, eta = theta[0], theta[1], theta[2:]\n    return -((mu + tau * eta - y) / s) ** 2\n\ndef lnprob_8school(theta, y, s):\n    prior = log_prior_8school(theta)\n    like_vect = log_likelihood_8school(theta, y, s)\n    like = np.sum(like_vect)\n    return like + prior",
      "names": [
        {
          "import_components": [
            "numpy",
            "inf"
          ],
          "code_str": "np.inf",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.inf"
        },
        {
          "import_components": [
            "numpy",
            "log"
          ],
          "code_str": "np.log",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.log"
        },
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.sum"
        },
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.sum"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "converting-emcee-objects-to-inferencedata",
        "headings": [
          "Converting emcee objects to InferenceData"
        ]
      }
    },
    {
      "source": "nwalkers = 40  # called chains in ArviZ\nndim = J + 2\ndraws = 1500\npos = np.random.normal(size=(nwalkers, ndim))\npos[:, 1] = np.absolute(pos[:, 1])\nsampler = emcee.EnsembleSampler(\n    nwalkers,\n    ndim,\n    lnprob_8school,\n    args=(y_obs, sigma)\n)\nsampler.run_mcmc(pos, draws);",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "absolute"
          ],
          "code_str": "np.absolute",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.absolute"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "converting-emcee-objects-to-inferencedata",
        "headings": [
          "Converting emcee objects to InferenceData"
        ]
      }
    },
    {
      "source": "# define variable names, it cannot be inferred from emcee\nvar_names = [\"mu\", \"tau\"] + [\"eta{}\".format(i) for i in range(J)]\nidata1 = az.from_emcee(sampler, var_names=var_names)\nidata1",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_emcee"
          ],
          "code_str": "az.from_emcee",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.from_emcee"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "manually-set-variable-names",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Manually set variable names"
        ]
      }
    },
    {
      "source": "idata1.sel(draw=slice(100, None))",
      "names": [],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "manually-set-variable-names",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Manually set variable names"
        ]
      }
    },
    {
      "source": "az.plot_posterior(idata1, var_names=[\"mu\", \"tau\", \"eta4\"])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "manually-set-variable-names",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Manually set variable names"
        ]
      }
    },
    {
      "source": "idata2 = az.from_emcee(sampler, slices=[0, 1, slice(2, None)])\nidata2",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_emcee"
          ],
          "code_str": "az.from_emcee",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_emcee"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "structuring-the-posterior-as-multidimensional-variables",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Structuring the posterior as multidimensional variables"
        ]
      }
    },
    {
      "source": "az.plot_trace(idata2, var_names=[\"var_2\"], coords={\"var_2_dim_0\": 4});",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "structuring-the-posterior-as-multidimensional-variables",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Structuring the posterior as multidimensional variables"
        ]
      }
    },
    {
      "source": "def lnprob_8school_blobs(theta, y, s):\n    prior = log_prior_8school(theta)\n    like_vect = log_likelihood_8school(theta, y, s)\n    like = np.sum(like_vect)\n    return like + prior, like_vect\n\nsampler_blobs = emcee.EnsembleSampler(\n    nwalkers,\n    ndim,\n    lnprob_8school_blobs,\n    args=(y_obs, sigma),\n)\nsampler_blobs.run_mcmc(pos, draws);",
      "names": [
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.sum"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "blobs-unlock-sample-stats-posterior-predictive-and-miscellanea",
        "headings": [
          "Converting emcee objects to InferenceData",
          "blobs: unlock sample stats, posterior predictive and miscellanea"
        ]
      }
    },
    {
      "source": "dims = {\"eta\": [\"school\"], \"log_likelihood\": [\"school\"]}\nidata3 = az.from_emcee(\n    sampler_blobs,\n    var_names = [\"mu\", \"tau\", \"eta\"],\n    slices=[0, 1, slice(2,None)],\n    blob_names=[\"log_likelihood\"],\n    dims=dims,\n    coords={\"school\": range(8)}\n)\nidata3",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_emcee"
          ],
          "code_str": "az.from_emcee",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.from_emcee"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "blobs-unlock-sample-stats-posterior-predictive-and-miscellanea",
        "headings": [
          "Converting emcee objects to InferenceData",
          "blobs: unlock sample stats, posterior predictive and miscellanea"
        ]
      }
    },
    {
      "source": "sampler_blobs.blobs[0, 1]",
      "names": [],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "multi-group-blobs",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Multi-group blobs"
        ]
      }
    },
    {
      "source": "def lnprob_8school_blobs(theta, y, sigma):\n    mu, tau, eta = theta[0], theta[1], theta[2:]\n    prior = log_prior_8school(theta)\n    like_vect = log_likelihood_8school(theta, y, sigma)\n    like = np.sum(like_vect)\n    # store pointwise log likelihood, useful for model comparison with az.loo or az.waic\n    # and posterior predictive samples as blobs\n    return like + prior, (like_vect, np.random.normal((mu + tau * eta), sigma))\n\nsampler_blobs = emcee.EnsembleSampler(\n    nwalkers,\n    ndim,\n    lnprob_8school_blobs,\n    args=(y_obs, sigma),\n)\nsampler_blobs.run_mcmc(pos, draws);\n\ndims = {\"eta\": [\"school\"], \"log_likelihood\": [\"school\"], \"y\": [\"school\"]}\nidata4 = az.from_emcee(\n    sampler_blobs,\n    var_names = [\"mu\", \"tau\", \"eta\"],\n    slices=[0, 1, slice(2,None)],\n    arg_names=[\"y\",\"sigma\"],\n    arg_groups=[\"observed_data\", \"constant_data\"],\n    blob_names=[\"log_likelihood\", \"y\"],\n    blob_groups=[\"log_likelihood\", \"posterior_predictive\"],\n    dims=dims,\n    coords={\"school\": range(8)}\n)\nidata4",
      "names": [
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sum"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "from_emcee"
          ],
          "code_str": "az.from_emcee",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "arviz.from_emcee"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "multi-group-blobs",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Multi-group blobs"
        ]
      }
    },
    {
      "source": "az.plot_ppc(idata4, var_names=[\"y\"], alpha=0.3, num_pp_samples=200);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "multi-group-blobs",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Multi-group blobs"
        ]
      }
    },
    {
      "source": "%load_ext watermark\n%watermark -n -u -v -iv -w",
      "names": [],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "multi-group-blobs",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Multi-group blobs"
        ]
      }
    }
  ],
  "getting_started/CreatingInferenceData": [
    {
      "source": "import arviz as az\nimport numpy as np",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "creating-inferencedata",
        "headings": [
          "Creating InferenceData"
        ]
      }
    },
    {
      "source": "size = 100\ndataset = az.convert_to_inference_data(np.random.randn(size))\ndataset",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "convert_to_inference_data"
          ],
          "code_str": "az.convert_to_inference_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.convert_to_inference_data"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-1d-numpy-array",
        "headings": [
          "Creating InferenceData",
          "From 1D numpy array"
        ]
      }
    },
    {
      "source": "shape = (1, 2, 3, 4, 5)\ndataset = az.convert_to_inference_data(np.random.randn(*shape))\ndataset",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "convert_to_inference_data"
          ],
          "code_str": "az.convert_to_inference_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.convert_to_inference_data"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-nd-numpy-array",
        "headings": [
          "Creating InferenceData",
          "From nD numpy array"
        ]
      }
    },
    {
      "source": "datadict = {\n    \"a\": np.random.randn(100),\n    \"b\": np.random.randn(1, 100, 10),\n    \"c\": np.random.randn(1, 100, 3, 4),\n}\ndataset = az.convert_to_inference_data(datadict)\ndataset",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "convert_to_inference_data"
          ],
          "code_str": "az.convert_to_inference_data",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.convert_to_inference_data"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-a-dictionary",
        "headings": [
          "Creating InferenceData",
          "From a dictionary"
        ]
      }
    },
    {
      "source": "datadict = {\n    \"a\": np.random.randn(100),\n    \"b\": np.random.randn(1, 100, 10),\n    \"c\": np.random.randn(1, 100, 3, 4),\n}\ncoords = {\"c1\": np.arange(3), \"c2\": np.arange(4), \"b1\": np.arange(10)}\ndims = {\"b\": [\"b1\"], \"c\": [\"c1\", \"c2\"]}\n\ndataset = az.convert_to_inference_data(datadict, coords=coords, dims=dims)\ndataset",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "convert_to_inference_data"
          ],
          "code_str": "az.convert_to_inference_data",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "arviz.convert_to_inference_data"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-dictionary-with-coords-and-dims",
        "headings": [
          "Creating InferenceData",
          "From dictionary with coords and dims"
        ]
      }
    },
    {
      "source": "import pandas as pd\nimport xarray as xr\n\ndata = np.random.rand(100,2)\ndf = pd.DataFrame({'a':data[:,0], 'b':data[:,1]})\ndf[\"chain\"] = 0\ndf[\"draw\"] = np.arange(len(df), dtype=int)\ndf = df.set_index([\"chain\", \"draw\"])\nxdata = xr.Dataset.from_dataframe(df)\n\ndataset = az.InferenceData(posterior=xdata)\ndataset",
      "names": [
        {
          "import_components": [
            "pandas"
          ],
          "code_str": "pandas",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pandas"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "pandas",
            "DataFrame"
          ],
          "code_str": "pd.DataFrame",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pandas.core.frame.DataFrame"
        },
        {
          "import_components": [
            "pandas",
            "DataFrame",
            "()"
          ],
          "code_str": "df",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "pandas.core.frame.DataFrame"
        },
        {
          "import_components": [
            "pandas",
            "DataFrame",
            "()"
          ],
          "code_str": "df",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pandas.core.frame.DataFrame"
        },
        {
          "import_components": [
            "pandas",
            "DataFrame",
            "()"
          ],
          "code_str": "df",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pandas.core.frame.DataFrame"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "InferenceData"
          ],
          "code_str": "az.InferenceData",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "arviz.data.inference_data.InferenceData"
        },
        {
          "import_components": [
            "arviz",
            "InferenceData",
            "()"
          ],
          "code_str": "dataset",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "arviz.data.inference_data.InferenceData"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-dataframe",
        "headings": [
          "Creating InferenceData",
          "From Dataframe"
        ]
      }
    },
    {
      "source": "import pymc3 as pm\n\ndraws = 500\nchains = 2\n\neight_school_data = {\n    \"J\": 8,\n    \"y\": np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-pymc3",
        "headings": [
          "Creating InferenceData",
          "From PyMC3"
        ]
      }
    },
    {
      "source": "with pm.Model() as model:\n    mu = pm.Normal(\"mu\", mu=0, sd=5)\n    tau = pm.HalfCauchy(\"tau\", beta=5)\n    theta_tilde = pm.Normal(\"theta_tilde\", mu=0, sd=1, shape=eight_school_data[\"J\"])\n    theta = pm.Deterministic(\"theta\", mu + tau * theta_tilde)\n    pm.Normal(\n        \"obs\", mu=theta, sd=eight_school_data[\"sigma\"], observed=eight_school_data[\"y\"]\n    )\n\n    trace = pm.sample(draws, chains=chains)\n    prior = pm.sample_prior_predictive()\n    posterior_predictive = pm.sample_posterior_predictive(trace)\n\n    pm_data = az.from_pymc3(\n        trace=trace,\n        prior=prior,\n        posterior_predictive=posterior_predictive,\n        coords={\"school\": np.arange(eight_school_data[\"J\"])},\n        dims={\"theta\": [\"school\"], \"theta_tilde\": [\"school\"]},\n    )\npm_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-pymc3",
        "headings": [
          "Creating InferenceData",
          "From PyMC3"
        ]
      }
    },
    {
      "source": "import pystan\n\nschools_code = \"\"\"\ndata {\n    int<lower=0> J;\n    real y[J];\n    real<lower=0> sigma[J];\n}\n\nparameters {\n    real mu;\n    real<lower=0> tau;\n    real theta_tilde[J];\n}\n\ntransformed parameters {\n    real theta[J];\n    for (j in 1:J)\n        theta[j] = mu + tau * theta_tilde[j];\n}\n\nmodel {\n    mu ~ normal(0, 5);\n    tau ~ cauchy(0, 5);\n    theta_tilde ~ normal(0, 1);\n    y ~ normal(theta, sigma);\n}\n\ngenerated quantities {\n    vector[J] log_lik;\n    vector[J] y_hat;\n    for (j in 1:J) {\n        log_lik[j] = normal_lpdf(y[j] | theta[j], sigma[j]);\n        y_hat[j] = normal_rng(theta[j], sigma[j]);\n    }\n}\n\"\"\"\n\neight_school_data = {\n    \"J\": 8,\n    \"y\": np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}\n\nstan_model = pystan.StanModel(model_code=schools_code)\nfit = stan_model.sampling(data=eight_school_data, control={\"adapt_delta\": 0.9})\n\nstan_data = az.from_pystan(\n    posterior=fit,\n    posterior_predictive=\"y_hat\",\n    observed_data=[\"y\"],\n    log_likelihood={\"y\": \"log_lik\"},\n    coords={\"school\": np.arange(eight_school_data[\"J\"])},\n    dims={\n        \"theta\": [\"school\"],\n        \"y\": [\"school\"],\n        \"log_lik\": [\"school\"],\n        \"y_hat\": [\"school\"],\n        \"theta_tilde\": [\"school\"],\n    },\n)\n\nstan_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-pystan",
        "headings": [
          "Creating InferenceData",
          "From PyStan"
        ]
      }
    },
    {
      "source": "import pyro\nimport pyro.distributions as dist\nimport torch\nfrom pyro.infer import MCMC, NUTS, Predictive\n\npyro.enable_validation(True)\npyro.set_rng_seed(0)\n\ndraws = 500\nchains = 2\neight_school_data = {\n    \"J\": 8,\n    \"y\": torch.tensor([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": torch.tensor([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}\n\n\ndef model(J, sigma, y=None):\n    mu = pyro.sample(\"mu\", dist.Normal(0, 5))\n    tau = pyro.sample(\"tau\", dist.HalfCauchy(5))\n    with pyro.plate(\"J\", J):\n        theta_tilde = pyro.sample(\"theta_tilde\", dist.Normal(0, 1))\n        theta = mu + tau * theta_tilde\n        return pyro.sample(\"obs\", dist.Normal(theta, sigma), obs=y)\n\n\nnuts_kernel = NUTS(model, jit_compile=True, ignore_jit_warnings=True)\nmcmc = MCMC(\n    nuts_kernel,\n    num_samples=draws,\n    warmup_steps=draws,\n    num_chains=chains,\n    disable_progbar=True,\n)\nmcmc.run(**eight_school_data)\nposterior_samples = mcmc.get_samples()\nposterior_predictive = Predictive(model, posterior_samples)(\n    eight_school_data[\"J\"], eight_school_data[\"sigma\"]\n)\nprior = Predictive(model, num_samples=500)(\n    eight_school_data[\"J\"], eight_school_data[\"sigma\"]\n)\n\npyro_data = az.from_pyro(\n    mcmc,\n    prior=prior,\n    posterior_predictive=posterior_predictive,\n    coords={\"school\": np.arange(eight_school_data[\"J\"])},\n    dims={\"theta\": [\"school\"]},\n)\npyro_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_pyro"
          ],
          "code_str": "az.from_pyro",
          "lineno": 44,
          "end_lineno": 44,
          "context": "none",
          "resolved_location": "arviz.from_pyro"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-pyro",
        "headings": [
          "Creating InferenceData",
          "From Pyro"
        ]
      }
    },
    {
      "source": "from cmdstanpy import CmdStanModel\n\nschools_code = \"\"\"\ndata {\n    int<lower=0> J;\n    real y[J];\n    real<lower=0> sigma[J];\n}\n\nparameters {\n    real mu;\n    real<lower=0> tau;\n    real theta_tilde[J];\n}\n\ntransformed parameters {\n    real theta[J];\n    for (j in 1:J)\n        theta[j] = mu + tau * theta_tilde[j];\n}\n\nmodel {\n    mu ~ normal(0, 5);\n    tau ~ cauchy(0, 5);\n    theta_tilde ~ normal(0, 1);\n    y ~ normal(theta, sigma);\n}\n\ngenerated quantities {\n    vector[J] log_lik;\n    vector[J] y_hat;\n    for (j in 1:J) {\n        log_lik[j] = normal_lpdf(y[j] | theta[j], sigma[j]);\n        y_hat[j] = normal_rng(theta[j], sigma[j]);\n    }\n}\n\"\"\"\n\nwith open(\"./eight_school.stan\", \"w\") as f:\n    print(schools_code, file=f)\n\nstan_file = \"./eight_school.stan\"\nstan_model = CmdStanModel(stan_file=stan_file)\nstan_model.compile()\n\neight_school_data = {\n    \"J\": 8,\n    \"y\": np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}\n\nstan_fit = stan_model.sample(data=eight_school_data)\n\ncmdstanpy_data = az.from_cmdstanpy(\n    posterior=stan_fit,\n    posterior_predictive=\"y_hat\",\n    observed_data={\"y\": eight_school_data[\"y\"]},\n    log_likelihood=\"log_lik\",\n    coords={\"school\": np.arange(eight_school_data[\"J\"])},\n    dims={\n        \"theta\": [\"school\"],\n        \"y\": [\"school\"],\n        \"log_lik\": [\"school\"],\n        \"y_hat\": [\"school\"],\n        \"theta_tilde\": [\"school\"],\n    },\n)\ncmdstanpy_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_cmdstanpy"
          ],
          "code_str": "az.from_cmdstanpy",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "arviz.from_cmdstanpy"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-cmdstanpy",
        "headings": [
          "Creating InferenceData",
          "From CmdStanPy"
        ]
      }
    },
    {
      "source": "# save for CmdStan example (needs CmdStanPy run)\nstan_fit.save_csvfiles(dir=\"sample_data\")",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      }
    },
    {
      "source": "schools_code = \"\"\"\ndata {\n    int<lower=0> J;\n    real y[J];\n    real<lower=0> sigma[J];\n}\n\nparameters {\n    real mu;\n    real<lower=0> tau;\n    real theta_tilde[J];\n}\n\ntransformed parameters {\n    real theta[J];\n    for (j in 1:J)\n        theta[j] = mu + tau * theta_tilde[j];\n}\n\nmodel {\n    mu ~ normal(0, 5);\n    tau ~ cauchy(0, 5);\n    theta_tilde ~ normal(0, 1);\n    y ~ normal(theta, sigma);\n}\n\ngenerated quantities {\n    vector[J] log_lik;\n    vector[J] y_hat;\n    for (j in 1:J) {\n        log_lik[j] = normal_lpdf(y[j] | theta[j], sigma[j]);\n        y_hat[j] = normal_rng(theta[j], sigma[j]);\n    }\n}\n\"\"\"\n\nwith open(\"./eight_school.stan\", \"w\") as f:\n    print(schools_code, file=f)",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      }
    },
    {
      "source": "eight_school_data = {\n    \"J\": 8,\n    \"y\": np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      }
    },
    {
      "source": "import pystan\n\npystan.stan_rdump(eight_school_data, \"./eight_school.data.R\")",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      }
    },
    {
      "source": "# Bash shell\n#\n# $ cd cmdstan\n# $ make build\n# $ make path/to/eight_school\n# $ cd path/to\n# $ for i in {1..4}\n#   do\n#     ./eight_school sample random seed=12345 \\\n#       id=$i data file=eight_school.data.R \\\n#       output file=sample_data/eight_school_samples-$i.csv &\n#   done\n# $",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      }
    },
    {
      "source": "# Let's use .stan and .csv files created/saved by the CmdStanPy procedure\n\n# glob string\nposterior_glob = \"sample_data/eight_school-*-[0-9].csv\"\n# list of paths\n# posterior_list =  [\n#     \"sample_data/eight_school-*-1.csv\",\n#     \"sample_data/eight_school-*-2.csv\",\n#     \"sample_data/eight_school-*-3.csv\",\n#     \"sample_data/eight_school-*-4.csv\",\n# ]\n\nobs_data_path = \"./eight_school.data.R\"\n\ncmdstan_data = az.from_cmdstan(\n    posterior=posterior_glob,\n    posterior_predictive=\"y_hat\",\n    observed_data=obs_data_path,\n    observed_data_var=\"y\",\n    log_likelihood=\"log_lik\",\n    coords={\"school\": np.arange(eight_school_data[\"J\"])},\n    dims={\n        \"theta\": [\"school\"],\n        \"y\": [\"school\"],\n        \"log_lik\": [\"school\"],\n        \"y_hat\": [\"school\"],\n        \"theta_tilde\": [\"school\"],\n    },\n)\ncmdstan_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_cmdstan"
          ],
          "code_str": "az.from_cmdstan",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "arviz.from_cmdstan"
        },
        {
          "import_components": [
            "arviz",
            "from_cmdstan",
            "()"
          ],
          "code_str": "cmdstan_data",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "arviz.data.inference_data.InferenceData"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      }
    },
    {
      "source": "import numpyro\nimport numpyro.distributions as dist\n\nfrom jax.random import PRNGKey\nfrom numpyro.distributions.transforms import AffineTransform\nfrom numpyro.infer import MCMC, NUTS, Predictive\n\nnumpyro.set_host_device_count(4)\n\neight_school_data = {\n    \"J\": 8,\n    \"y\": np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}\n\n\ndef model(J, sigma, y=None):\n    mu = numpyro.sample(\"mu\", dist.Normal(0, 5))\n    tau = numpyro.sample(\"tau\", dist.HalfCauchy(5))\n    # use non-centered reparameterization\n    theta = numpyro.sample(\n        \"theta\",\n        dist.TransformedDistribution(\n            dist.Normal(np.zeros(J), 1), AffineTransform(mu, tau)\n        ),\n    )\n    numpyro.sample(\"y\", dist.Normal(theta, sigma), obs=y)\n\n\nkernel = NUTS(model)\nmcmc = MCMC(\n    kernel, num_warmup=500, num_samples=500, num_chains=4, chain_method=\"parallel\"\n)\nmcmc.run(PRNGKey(0), **eight_school_data, extra_fields=[\"num_steps\", \"energy\"])\nposterior_samples = mcmc.get_samples()\nposterior_predictive = Predictive(model, posterior_samples)(\n    PRNGKey(1), eight_school_data[\"J\"], eight_school_data[\"sigma\"]\n)\nprior = Predictive(model, num_samples=500)(\n    PRNGKey(2), eight_school_data[\"J\"], eight_school_data[\"sigma\"]\n)\n\nnumpyro_data = az.from_numpyro(\n    mcmc,\n    prior=prior,\n    posterior_predictive=posterior_predictive,\n    coords={\"school\": np.arange(eight_school_data[\"J\"])},\n    dims={\"theta\": [\"school\"]},\n)\nnumpyro_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_numpyro"
          ],
          "code_str": "az.from_numpyro",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "arviz.from_numpyro"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-numpyro",
        "headings": [
          "Creating InferenceData",
          "From NumPyro"
        ]
      }
    },
    {
      "source": "import pyjags",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "import-package",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "Import Package"
        ]
      }
    },
    {
      "source": "eight_school_prior_model_code = ''' \nmodel {\n    mu ~ dnorm(0.0, 1.0/25)\n    tau ~ dt(0.0, 1.0/25, 1.0) T(0, )\n    for (j in 1:J) {\n        theta_tilde[j] ~ dnorm(0.0, 1.0)\n    }\n}\n'''",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "prior-model",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "JAGS Model Code",
          "Prior Model"
        ]
      }
    },
    {
      "source": "eight_school_posterior_model_code = ''' \nmodel {\n    mu ~ dnorm(0.0, 1.0/25)\n    tau ~ dt(0.0, 1.0/25, 1.0) T(0, )\n    for (j in 1:J) {\n        theta_tilde[j] ~ dnorm(0.0, 1.0)\n        y[j] ~ dnorm(mu + tau * theta_tilde[j], 1.0/(sigma[j]^2))\n        log_like[j] = logdensity.norm(y[j], mu + tau * theta_tilde[j], 1.0/(sigma[j]^2))\n    }\n}\n'''",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "posterior-model",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "JAGS Model Code",
          "Posterior Model"
        ]
      }
    },
    {
      "source": "parameters = ['mu', 'tau', 'theta_tilde']\nvariables = parameters + ['log_like']",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "posterior-model",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "JAGS Model Code",
          "Posterior Model"
        ]
      }
    },
    {
      "source": "jags_prior_model = pyjags.Model(\n    code=eight_school_prior_model_code, \n    data={\"J\": 8}, \n    chains=4, \n    threads=4,\n    chains_per_thread=1\n)",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "id2",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "Construct JAGS Model and Run Adaptation Steps",
          "Prior Model"
        ]
      }
    },
    {
      "source": "jags_posterior_model = pyjags.Model(\n    code=eight_school_posterior_model_code, \n    data=eight_school_data, \n    chains=4, \n    threads=4,\n    chains_per_thread=1\n)",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "id3",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "Construct JAGS Model and Run Adaptation Steps",
          "Posterior Model"
        ]
      }
    },
    {
      "source": "jags_prior_samples = jags_prior_model.sample(5000 + 1000, vars=parameters)\njags_posterior_samples = jags_posterior_model.sample(5000 + 1000, vars=variables)",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "draw-1000-burn-in-samples-and-5000-actual-samples-per-chain",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "Draw 1000 Burn-In Samples and 5000 Actual Samples per Chain"
        ]
      }
    },
    {
      "source": "pyjags_data = az.from_pyjags(\n    posterior=jags_posterior_samples, \n    prior=jags_prior_samples, \n    log_likelihood={'y': 'log_like'}, \n    save_warmup=True, \n    warmup_iterations=1000\n)\npyjags_data",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pyjags"
          ],
          "code_str": "az.from_pyjags",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_pyjags"
        },
        {
          "import_components": [
            "arviz",
            "from_pyjags",
            "()"
          ],
          "code_str": "pyjags_data",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "arviz.data.inference_data.InferenceData"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "convert-pyjags-samples-dictionary-to-arviz-inference-data-object",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "Convert PyJAGS Samples Dictionary to ArviZ Inference Data Object"
        ]
      }
    }
  ],
  "getting_started/Installation": [],
  "getting_started/Introduction": [
    {
      "source": "import arviz as az\nimport numpy as np",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-quickstart",
        "headings": [
          "ArviZ Quickstart"
        ]
      }
    },
    {
      "source": "# ArviZ ships with style sheets!\naz.style.use(\"arviz-darkgrid\")",
      "names": [],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-style-sheets",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ style sheets"
        ]
      }
    },
    {
      "source": "az.plot_posterior(np.random.randn(100_000));",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "get-started-with-plotting",
        "headings": [
          "ArviZ Quickstart",
          "Get started with plotting"
        ]
      }
    },
    {
      "source": "size = (10, 50)\naz.plot_forest(\n    {\n        \"normal\": np.random.randn(*size),\n        \"gumbel\": np.random.gumbel(size=size),\n        \"student t\": np.random.standard_t(df=6, size=size),\n        \"exponential\": np.random.exponential(size=size),\n    }\n);",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "gumbel"
          ],
          "code_str": "np.random.gumbel",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.gumbel"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "standard_t"
          ],
          "code_str": "np.random.standard_t",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.standard_t"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "exponential"
          ],
          "code_str": "np.random.exponential",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.exponential"
        },
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "get-started-with-plotting",
        "headings": [
          "ArviZ Quickstart",
          "Get started with plotting"
        ]
      }
    },
    {
      "source": "az.rcParams['stats.hdi_prob'] = 0.90",
      "names": [],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-rcparams",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams"
        ]
      }
    },
    {
      "source": "import pymc3 as pm\n\nJ = 8\ny = np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0])\nsigma = np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0])\nschools = np.array(\n    [\n        \"Choate\",\n        \"Deerfield\",\n        \"Phillips Andover\",\n        \"Phillips Exeter\",\n        \"Hotchkiss\",\n        \"Lawrenceville\",\n        \"St. Paul's\",\n        \"Mt. Hermon\",\n    ]\n)",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-rcparams",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams"
        ]
      }
    },
    {
      "source": "with pm.Model() as centered_eight:\n    mu = pm.Normal(\"mu\", mu=0, sd=5)\n    tau = pm.HalfCauchy(\"tau\", beta=5)\n    theta = pm.Normal(\"theta\", mu=mu, sd=tau, shape=J)\n    obs = pm.Normal(\"obs\", mu=theta, sd=sigma, observed=y)\n\n    # This pattern is useful in PyMC3\n    prior = pm.sample_prior_predictive()\n    centered_eight_trace = pm.sample()\n    posterior_predictive = pm.sample_posterior_predictive(centered_eight_trace)",
      "names": [],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-rcparams",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams"
        ]
      }
    },
    {
      "source": "az.plot_autocorr(centered_eight_trace, var_names=[\"mu\", \"tau\"]);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_autocorr"
          ],
          "code_str": "az.plot_autocorr",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_autocorr"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-rcparams",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams"
        ]
      }
    },
    {
      "source": "data = az.from_pymc3(\n    trace=centered_eight_trace,\n    prior=prior,\n    posterior_predictive=posterior_predictive,\n    model=centered_eight,\n    coords={\"school\": schools},\n    dims={\"theta\": [\"school\"], \"obs\": [\"school\"]},\n)\ndata",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "convert-to-inferencedata",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams",
          "Convert to InferenceData"
        ]
      }
    },
    {
      "source": "az.plot_trace(data);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "convert-to-inferencedata",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams",
          "Convert to InferenceData"
        ]
      }
    },
    {
      "source": "import pystan\n\n\nschools_code = \"\"\"\ndata {\n  int<lower=0> J;\n  real y[J];\n  real<lower=0> sigma[J];\n}\n\nparameters {\n  real mu;\n  real<lower=0> tau;\n  real theta[J];\n}\n\nmodel {\n  mu ~ normal(0, 5);\n  tau ~ cauchy(0, 5);\n  theta ~ normal(mu, tau);\n  y ~ normal(theta, sigma);\n}\ngenerated quantities {\n    vector[J] log_lik;\n    vector[J] y_hat;\n    for (j in 1:J) {\n        log_lik[j] = normal_lpdf(y[j] | theta[j], sigma[j]);\n        y_hat[j] = normal_rng(theta[j], sigma[j]);\n    }\n}\n\"\"\"\n\nschools_dat = {\n    \"J\": 8,\n    \"y\": [28, 8, -3, 7, -1, 1, 18, 12],\n    \"sigma\": [15, 10, 16, 11, 9, 11, 10, 18],\n}\n\nsm = pystan.StanModel(model_code=schools_code, verbose=False)\nfit = sm.sampling(data=schools_dat, iter=1000, chains=4)",
      "names": [],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "plotting-with-pystan-objects",
        "headings": [
          "ArviZ Quickstart",
          "Plotting with PyStan objects"
        ]
      }
    },
    {
      "source": "az.plot_density(fit, var_names=[\"mu\", \"tau\"]);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "plotting-with-pystan-objects",
        "headings": [
          "ArviZ Quickstart",
          "Plotting with PyStan objects"
        ]
      }
    },
    {
      "source": "data = az.from_pystan(\n    posterior=fit,\n    posterior_predictive=\"y_hat\",\n    observed_data=[\"y\"],\n    log_likelihood={\"y\": \"log_lik\"},\n    coords={\"school\": schools},\n    dims={\n        \"theta\": [\"school\"],\n        \"y\": [\"school\"],\n        \"log_lik\": [\"school\"],\n        \"y_hat\": [\"school\"],\n        \"theta_tilde\": [\"school\"],\n    },\n)\ndata",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "plotting-with-pystan-objects",
        "headings": [
          "ArviZ Quickstart",
          "Plotting with PyStan objects"
        ]
      }
    },
    {
      "source": "az.plot_pair(\n    data,\n    coords={\"school\": [\"Choate\", \"Deerfield\", \"Phillips Andover\"]},\n    divergences=True,\n);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_pair"
          ],
          "code_str": "az.plot_pair",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_pair"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "plotting-with-pystan-objects",
        "headings": [
          "ArviZ Quickstart",
          "Plotting with PyStan objects"
        ]
      }
    }
  ],
  "getting_started/WorkingWithInferenceData": [
    {
      "source": "import arviz as az",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "working-with-inferencedata",
        "headings": [
          "Working with InferenceData"
        ]
      }
    },
    {
      "source": "idata = az.load_arviz_data(\"centered_eight\")\nidata",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "working-with-inferencedata",
        "headings": [
          "Working with InferenceData"
        ]
      }
    },
    {
      "source": "idata.posterior",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "working-with-inferencedata",
        "headings": [
          "Working with InferenceData"
        ]
      }
    },
    {
      "source": "stacked = idata.posterior.stack(draws=(\"chain\", \"draw\"))\nstacked",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "combine-chains-and-draws",
        "headings": [
          "Working with InferenceData",
          "Combine chains and draws"
        ]
      }
    },
    {
      "source": "stacked.mu.values",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "obtain-a-numpy-array-for-a-given-parameter",
        "headings": [
          "Working with InferenceData",
          "Obtain a NumPy array for a given parameter"
        ]
      }
    },
    {
      "source": "len(idata.observed_data.school)",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "get-the-number-of-variables",
        "headings": [
          "Working with InferenceData",
          "Get the number of variables"
        ]
      }
    },
    {
      "source": "idata.observed_data.school.values",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "get-the-variables-names",
        "headings": [
          "Working with InferenceData",
          "Get the variables\u2019 names"
        ]
      }
    },
    {
      "source": "idata.sel(chain=[0, 2]).posterior",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "get-a-subset-of-chains",
        "headings": [
          "Working with InferenceData",
          "Get a subset of chains"
        ]
      }
    },
    {
      "source": "burnin = idata.sel(draw=slice(100, None))",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "remove-the-first-n-draws-burn-in",
        "headings": [
          "Working with InferenceData",
          "Remove the first n draws (burn-in)"
        ]
      }
    },
    {
      "source": "burnin_posterior = idata.sel(draw=slice(100, None), groups=\"posterior\")",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "remove-the-first-n-draws-burn-in",
        "headings": [
          "Working with InferenceData",
          "Remove the first n draws (burn-in)"
        ]
      }
    },
    {
      "source": "idata.posterior.mean()",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "compute-posterior-mean-values-along-draw-and-chains-dimensions",
        "headings": [
          "Working with InferenceData",
          "Compute posterior mean values along draw and chains dimensions"
        ]
      }
    },
    {
      "source": "idata.posterior.mean(dim=['chain', 'draw'])",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "compute-posterior-mean-values-along-draw-and-chains-dimensions",
        "headings": [
          "Working with InferenceData",
          "Compute posterior mean values along draw and chains dimensions"
        ]
      }
    }
  ],
  "getting_started/XarrayforArviZ": [
    {
      "source": "# Load the centered eight schools model\nimport arviz as az\n\ndata = az.load_arviz_data(\"centered_eight\")\ndata",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "getting_started/XarrayforArviZ",
        "ref_id": "an-introduction-to-each",
        "headings": [
          "Introduction to xarray, InferenceData, and netCDF for ArviZ",
          "An introduction to each"
        ]
      }
    },
    {
      "source": "# Get the posterior dataset\nposterior = data.posterior\nposterior",
      "names": [],
      "example": {
        "document": "getting_started/XarrayforArviZ",
        "ref_id": "an-introduction-to-each",
        "headings": [
          "Introduction to xarray, InferenceData, and netCDF for ArviZ",
          "An introduction to each"
        ]
      }
    },
    {
      "source": "# Get the observed xarray\nobserved_data = data.observed_data\nobserved_data",
      "names": [],
      "example": {
        "document": "getting_started/XarrayforArviZ",
        "ref_id": "an-introduction-to-each",
        "headings": [
          "Introduction to xarray, InferenceData, and netCDF for ArviZ",
          "An introduction to each"
        ]
      }
    },
    {
      "source": "data = az.load_arviz_data(\"centered_eight\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "getting_started/XarrayforArviZ",
        "ref_id": "netcdf",
        "headings": [
          "Introduction to xarray, InferenceData, and netCDF for ArviZ",
          "NetCDF"
        ]
      }
    },
    {
      "source": "data.to_netcdf(\"eight_schools_model.nc\")",
      "names": [],
      "example": {
        "document": "getting_started/XarrayforArviZ",
        "ref_id": "netcdf",
        "headings": [
          "Introduction to xarray, InferenceData, and netCDF for ArviZ",
          "NetCDF"
        ]
      }
    }
  ],
  "getting_started/index": [],
  "index": [],
  "schema/PyMC3_schema_example": [
    {
      "source": "import arviz as az\nimport pymc3 as pm\nimport pandas as pd\nimport numpy as np\nimport xarray\nxarray.set_options(display_style=\"html\");",
      "names": [
        {
          "import_components": [
            "pandas"
          ],
          "code_str": "pandas",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pandas"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "#read data\ndata = pd.read_csv(\"linear_regression_data.csv\", index_col=0)\ntime = data.time.values\nslack_comments = data.comments.values\ngithub_commits = data.commits.values\nnames = data.index.values\nN = len(names)\ndata",
      "names": [
        {
          "import_components": [
            "pandas",
            "read_csv"
          ],
          "code_str": "pd.read_csv",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pandas.read_csv"
        }
      ],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "# data for out of sample predictions\ncandidate_devs = [\"Francis\", \"Gerard\"]\ncandidate_devs_time = np.array([3.6, 5.1])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "dims={\n    \"slack_comments\": [\"developer\"],\n    \"github_commits\": [\"developer\"],\n    \"time_since_joined\": [\"developer\"],\n}\nwith pm.Model() as model:\n    time_since_joined = pm.Data(\"time_since_joined\", time)\n    \n    b_sigma = pm.HalfNormal('b_sigma', sd=300)\n    c_sigma = pm.HalfNormal('c_sigma', sd=6)\n    b0 = pm.Normal(\"b0\", mu=0, sd=200)\n    b1 = pm.Normal(\"b1\", mu=0, sd=200)\n    c0 = pm.Normal(\"c0\", mu=0, sd=10)\n    c1 = pm.Normal(\"c1\", mu=0, sd=10)\n    \n    pm.Normal(\"slack_comments\", mu=b0 + b1 * time_since_joined, sigma=b_sigma, observed=slack_comments)\n    pm.Normal(\"github_commits\", mu=c0 + c1 * time_since_joined, sigma=c_sigma, observed=github_commits)\n    \n    trace = pm.sample(400, chains=4)\n    posterior_predictive = pm.sample_posterior_predictive(trace)\n    prior = pm.sample_prior_predictive(150)\n    idata_pymc3 = az.from_pymc3(\n        trace,\n        prior=prior,\n        posterior_predictive=posterior_predictive,\n        coords={\"developer\": names},\n        dims=dims\n    )",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        }
      ],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "dims_pred={\n    \"slack_comments\": [\"candidate developer\"],\n    \"github_commits\": [\"candidate developer\"],\n    \"time_since_joined\": [\"candidate developer\"],\n}\nwith model:\n    pm.set_data({\"time_since_joined\": candidate_devs_time})\n    predictions = pm.sample_posterior_predictive(trace)\n    az.from_pymc3_predictions(\n        predictions, \n        idata_orig=idata_pymc3, \n        inplace=True,\n        coords={\"candidate developer\": candidate_devs},\n        dims=dims_pred,\n    )",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pymc3_predictions"
          ],
          "code_str": "az.from_pymc3_predictions",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "arviz.from_pymc3_predictions"
        }
      ],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "idata_pymc3",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "idata_pymc3.posterior",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "idata_pymc3.sample_stats",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "idata_pymc3.log_likelihood",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "idata_pymc3.posterior_predictive",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "idata_pymc3.observed_data",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "idata_pymc3.constant_data",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "idata_pymc3.prior",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "idata_pymc3.predictions",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    },
    {
      "source": "idata_pymc3.predictions_constant_data",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      }
    }
  ],
  "schema/PyStan_schema_example": [
    {
      "source": "import arviz as az\nimport pystan\nimport pandas as pd\nimport numpy as np\nimport xarray\nxarray.set_options(display_style=\"html\");",
      "names": [
        {
          "import_components": [
            "pandas"
          ],
          "code_str": "pandas",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pandas"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "#read data\ndata = pd.read_csv(\"linear_regression_data.csv\", index_col=0)\ntime_since_joined = data.time.values\nslack_comments = data.comments.values\ngithub_commits = data.commits.values\nnames = data.index.values\nN = len(names)\ndata",
      "names": [
        {
          "import_components": [
            "pandas",
            "read_csv"
          ],
          "code_str": "pd.read_csv",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pandas.read_csv"
        }
      ],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "# data for out of sample predictions\ncandidate_devs = [\"Francis\", \"Gerard\"]\ncandidate_devs_time = np.array([3.6, 5.1])\nN_pred = len(candidate_devs)",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "linreg_prior_code = \"\"\"\ndata {\n  int<lower=0> N;\n  real time_since_joined[N];\n}\n\ngenerated quantities {\n    real b0;\n    real b1;\n    real log_b_sigma;\n    real<lower=0> b_sigma;\n    \n    real c0;\n    real c1;\n    real log_c_sigma;\n    real<lower=0> c_sigma;\n    \n    vector[N] slack_comments_hat;\n    vector[N] github_commits_hat;\n    \n    b0 = normal_rng(0,200);\n    b1 = normal_rng(0,200);\n    b_sigma = abs(normal_rng(0,300));\n    log_b_sigma = log(b_sigma);\n    \n    c0 = normal_rng(0,10);\n    c1 = normal_rng(0,10);\n    c_sigma = fabs(normal_rng(0,6));\n    log_c_sigma = log(b_sigma);\n    \n    for (n in 1:N) {\n        slack_comments_hat[n] = normal_rng(b0 + b1 * time_since_joined[n], b_sigma);\n        github_commits_hat[n] = normal_rng(c0 + c1 * time_since_joined[n], c_sigma);\n    }\n}\n\"\"\"\nsm_prior = pystan.StanModel(model_code=linreg_prior_code)",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "linreg_prior_data_dict = {\"N\": N, \"time_since_joined\": time_since_joined}\nprior = sm_prior.sampling(data=linreg_prior_data_dict, iter=150, chains=1, algorithm='Fixed_param', warmup=0)",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "linreg_code = \"\"\"\ndata {\n  int<lower=0> N;\n  vector<lower=0>[N] time_since_joined;\n  vector<lower=0>[N] slack_comments;\n  vector<lower=0>[N] github_commits;\n  \n  \n  // out of sample prediction\n  int<lower=0> N_pred;\n  vector<lower=0>[N_pred] time_since_joined_pred;\n}\n\nparameters {\n  real b0;\n  real b1;\n  real log_b_sigma;\n  \n  real c0;\n  real c1;\n  real log_c_sigma;\n}\n\ntransformed parameters {\n  real<lower=0> b_sigma = exp(log_b_sigma);\n  real<lower=0> c_sigma = exp(log_c_sigma);\n}\n\nmodel {\n  b0 ~ normal(0,200);\n  b1 ~ normal(0,200);\n  b_sigma ~ normal(0,300);\n  slack_comments ~ normal(b0 + b1 * time_since_joined, b_sigma);\n  github_commits ~ normal(c0 + c1 * time_since_joined, c_sigma);\n  \n}\n\ngenerated quantities {\n    // elementwise log likelihood\n    vector[N] log_likelihood_slack_comments;\n    vector[N] log_likelihood_github_commits;\n    \n    // posterior predictive\n    vector[N] slack_comments_hat;\n    vector[N] github_commits_hat;\n    \n    // out of sample prediction\n    vector[N_pred] slack_comments_pred;\n    vector[N_pred] github_commits_pred;\n    \n    // posterior predictive\n    for (n in 1:N) {\n        log_likelihood_slack_comments[n] = normal_lpdf(slack_comments[n] | b0 + b1 * time_since_joined[n], b_sigma);\n        slack_comments_hat[n] = normal_rng(b0 + b1 * time_since_joined[n], b_sigma);\n        \n        log_likelihood_github_commits[n] = normal_lpdf(github_commits[n] | c0 + c1 * time_since_joined[n], c_sigma);\n        github_commits_hat[n] = normal_rng(c0 + c1 * time_since_joined[n], c_sigma);\n    }\n    \n    // out of sample prediction\n    for (n in 1:N_pred) {\n        slack_comments_pred[n] = normal_rng(b0 + b1 * time_since_joined_pred[n], b_sigma);\n        github_commits_pred[n] = normal_rng(c0 + c1 * time_since_joined_pred[n], c_sigma);\n    }\n}\n\"\"\"\nsm = pystan.StanModel(model_code=linreg_code)",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "linreg_data_dict = {\"N\": N, \"slack_comments\": slack_comments, \"github_commits\": github_commits, \"time_since_joined\": time_since_joined, \"N_pred\" : N_pred, \"time_since_joined_pred\" : candidate_devs_time}\nposterior = sm.sampling(data=linreg_data_dict, iter=200, chains=4)",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan = az.from_pystan(\n    posterior=posterior,\n    prior=prior,\n    posterior_predictive=[\"slack_comments_hat\",\"github_commits_hat\"],\n    prior_predictive=[\"slack_comments_hat\",\"github_commits_hat\"],\n    observed_data=[\"slack_comments\",\"github_commits\"],\n    constant_data=[\"time_since_joined\"],\n    log_likelihood={\n        \"slack_comments\": \"log_likelihood_slack_comments\",\n        \"github_commits\": \"log_likelihood_github_commits\"\n    },\n    predictions=[\"slack_comments_pred\", \"github_commits_pred\"],\n    predictions_constant_data=[\"time_since_joined_pred\"],\n    coords={\"developer\": names, \"candidate developer\" : candidate_devs},\n    dims={\n        \"slack_comments\": [\"developer\"],\n        \"github_commits\" : [\"developer\"],\n        \"slack_comments_hat\": [\"developer\"],\n        \"github_commits_hat\": [\"developer\"],\n        \"time_since_joined\": [\"developer\"],\n        \"slack_comments_pred\" : [\"candidate developer\"],\n        \"github_commits_pred\" : [\"candidate developer\"],\n        \"time_since_joined_pred\" : [\"candidate developer\"],\n    }\n)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.posterior",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.sample_stats",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.log_likelihood",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.posterior_predictive",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.observed_data",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.constant_data",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.prior",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.sample_stats_prior",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.prior_predictive",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.predictions",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    },
    {
      "source": "idata_stan.predictions_constant_data",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      }
    }
  ],
  "schema/schema": [],
  "user_guide/Dask": [
    {
      "source": "import arviz as az\nimport numpy as np\nimport timeit\nimport dask\n\nfrom arviz.utils import conditional_jit, Dask",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "arviz",
            "utils",
            "Dask"
          ],
          "code_str": "Dask",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "arviz.utils.Dask"
        }
      ],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "dask-overview",
        "headings": [
          "Dask for ArviZ",
          "Dask overview"
        ]
      }
    },
    {
      "source": "# optional imports\nfrom dask.distributed import Client\nfrom dask.diagnostics import ResourceProfiler\n\nfrom bokeh.resources import INLINE\nimport bokeh.io\nbokeh.io.output_notebook(INLINE)\n\n%reload_ext memory_profiler",
      "names": [
        {
          "import_components": [
            "dask",
            "diagnostics",
            "ResourceProfiler"
          ],
          "code_str": "ResourceProfiler",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "dask.diagnostics.ResourceProfiler"
        },
        {
          "import_components": [
            "bokeh",
            "resources"
          ],
          "code_str": "bokeh.resources",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "bokeh.resources"
        },
        {
          "import_components": [
            "bokeh",
            "resources",
            "INLINE"
          ],
          "code_str": "INLINE",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "bokeh.resources.INLINE"
        },
        {
          "import_components": [
            "bokeh",
            "io"
          ],
          "code_str": "bokeh.io",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "bokeh.io"
        },
        {
          "import_components": [
            "bokeh",
            "resources",
            "INLINE"
          ],
          "code_str": "INLINE",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "bokeh.resources.INLINE"
        },
        {
          "import_components": [
            "bokeh",
            "io",
            "output_notebook"
          ],
          "code_str": "bokeh.io.output_notebook",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "bokeh.io.output_notebook"
        }
      ],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "dask-overview",
        "headings": [
          "Dask for ArviZ",
          "Dask overview"
        ]
      }
    },
    {
      "source": "client = Client(threads_per_worker=4, n_workers=1, memory_limit=\"1.2GB\")\nclient",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "dask-overview",
        "headings": [
          "Dask for ArviZ",
          "Dask overview"
        ]
      }
    },
    {
      "source": "array_size = 250_000_000",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      }
    },
    {
      "source": "%%memit \ndata = np.random.randn(array_size)\nnp.var(data, ddof=1)\ndel data",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      }
    },
    {
      "source": "%memit data = dask.array.random.normal(size=array_size, chunks=\"auto\")\ndata",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      }
    },
    {
      "source": "var = dask.array.var(data, ddof=1)\nvar.visualize()",
      "names": [
        {
          "import_components": [
            "dask",
            "array",
            "var"
          ],
          "code_str": "dask.array.var",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "dask.array.var"
        }
      ],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      }
    },
    {
      "source": "with ResourceProfiler(dt=0.25) as rprof:\n    var.compute()\n\nrprof.visualize();",
      "names": [
        {
          "import_components": [
            "dask",
            "diagnostics",
            "ResourceProfiler"
          ],
          "code_str": "ResourceProfiler",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "dask.diagnostics.ResourceProfiler"
        }
      ],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      }
    },
    {
      "source": "del data",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      }
    },
    {
      "source": "%memit daskdata = dask.array.random.random((10, 1000, 10000), chunks=(10, 1000, 625))\ndaskdata",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "from-dictionary-using-dask-array",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Creating Dask-backed InferenceData objects",
          "From dictionary using dask.array"
        ]
      }
    },
    {
      "source": "daskdata.visualize() # Each chunk will follow lazy evaluation ",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "from-dictionary-using-dask-array",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Creating Dask-backed InferenceData objects",
          "From dictionary using dask.array"
        ]
      }
    },
    {
      "source": "datadict = {\"x\": daskdata}\n%memit idata_dask = az.from_dict(posterior=datadict, dims={\"x\": [\"dim_1\"]})\nidata_dask",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "from-dictionary-using-dask-array",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Creating Dask-backed InferenceData objects",
          "From dictionary using dask.array"
        ]
      }
    },
    {
      "source": "%memit npdata = np.random.rand(10, 1000, 10000)\ndatadict = {\"x\": npdata}\nidata_numpy = az.from_dict(posterior=datadict, dims={\"x\": [\"dim_1\"]})\nidata_numpy",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        }
      ],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "executing-arviz-functions-with-dask",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask"
        ]
      }
    },
    {
      "source": "%%time\n%%memit\n\naz.ess(idata_numpy)",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-ess",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.ess"
        ]
      }
    },
    {
      "source": "Dask.enable_dask(dask_kwargs={\"dask\": \"parallelized\", \"output_dtypes\": [float]})",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-ess",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.ess"
        ]
      }
    },
    {
      "source": "%%time\n%%memit\n\ness = az.ess(idata_dask)\n\nwith ResourceProfiler(dt=0.25) as rprof:\n    ess.compute()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-ess",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.ess"
        ]
      }
    },
    {
      "source": "ess.data_vars[\"x\"].data.visualize()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-ess",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.ess"
        ]
      }
    },
    {
      "source": "rprof.visualize()\nDask.disable_dask()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-ess",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.ess"
        ]
      }
    },
    {
      "source": "%%time\n%%memit\n\naz.rhat(idata_numpy)",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-rhat",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.rhat "
        ]
      }
    },
    {
      "source": "Dask.enable_dask(dask_kwargs={\"dask\": \"parallelized\", \"output_dtypes\": [int]})",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-rhat",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.rhat "
        ]
      }
    },
    {
      "source": "%%time\n%%memit\n\nrhat =  az.rhat(idata_dask, dask_kwargs={\"output_dtypes\": [float]})\n\nwith ResourceProfiler(dt=0.25) as rprof:\n    rhat.compute()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-rhat",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.rhat "
        ]
      }
    },
    {
      "source": "rprof.visualize()\nDask.disable_dask()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-rhat",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.rhat "
        ]
      }
    },
    {
      "source": "%%time\n%%memit\n\naz.hdi(idata_numpy, hdi_prob=.68)",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-hdi",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.hdi"
        ]
      }
    },
    {
      "source": "Dask.enable_dask(dask_kwargs={\"dask\": \"parallelized\", \"output_dtypes\": [float]})",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-hdi",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.hdi"
        ]
      }
    },
    {
      "source": "%%time\n%%memit\n\nhdi = az.hdi(idata_dask, hdi_prob=0.68, dask_gufunc_kwargs={\"output_sizes\": {\"hdi\": 2}})\n\nwith ResourceProfiler(dt=0.25) as rprof:\n    hdi.compute()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-hdi",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.hdi"
        ]
      }
    },
    {
      "source": "rprof.visualize()\nDask.disable_dask()\nclient.close()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-hdi",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.hdi"
        ]
      }
    }
  ],
  "user_guide/Numba": [
    {
      "source": "import arviz as az\nimport numpy as np\nimport timeit\n\nfrom arviz.utils import conditional_jit, Numba\nfrom arviz.stats.diagnostics import ks_summary",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "arviz",
            "utils",
            "Numba"
          ],
          "code_str": "Numba",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "arviz.utils.Numba"
        }
      ],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      }
    },
    {
      "source": "data = np.random.randn(1000000)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        }
      ],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      }
    },
    {
      "source": "def variance(data, ddof=0):  # Method to calculate variance without using numba\n    a_a, b_b = 0, 0\n    for i in data:\n        a_a = a_a + i\n        b_b = b_b + i * i\n    var = b_b / (len(data)) - ((a_a / (len(data))) ** 2)\n    var = var * (len(data) / (len(data) - ddof))\n    return var",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      }
    },
    {
      "source": "%timeit variance(data, ddof=1)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      }
    },
    {
      "source": "@conditional_jit\ndef variance_jit(data, ddof=0):  # Calculating variance with numba\n    a_a, b_b = 0, 0\n    for i in data:\n        a_a = a_a + i\n        b_b = b_b + i * i\n    var = b_b / (len(data)) - ((a_a / (len(data))) ** 2)\n    var = var * (len(data) / (len(data) - ddof))\n    return var",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      }
    },
    {
      "source": "%timeit variance_jit(data, ddof=1)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      }
    },
    {
      "source": "%timeit np.var(data, ddof=1)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      }
    },
    {
      "source": "summary_data = np.random.randn(1000, 100, 10)\nschool = az.load_arviz_data(\"centered_eight\").posterior[\"mu\"].values",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-wihin-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba wihin ArviZ"
        ]
      }
    },
    {
      "source": "Numba.disable_numba()\nNumba.numba_flag",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-wihin-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba wihin ArviZ"
        ]
      }
    },
    {
      "source": "%timeit ks_summary(summary_data)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-wihin-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba wihin ArviZ"
        ]
      }
    },
    {
      "source": "%timeit ks_summary(school)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-wihin-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba wihin ArviZ"
        ]
      }
    },
    {
      "source": "Numba.enable_numba()\nNumba.numba_flag",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-wihin-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba wihin ArviZ"
        ]
      }
    },
    {
      "source": "%timeit ks_summary(summary_data)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-wihin-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba wihin ArviZ"
        ]
      }
    },
    {
      "source": "%timeit ks_summary(school)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-wihin-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba wihin ArviZ"
        ]
      }
    }
  ],
  "user_guide/computation": [],
  "user_guide/data_structures": [],
  "user_guide/index": [],
  "user_guide/label_guide": [],
  "user_guide/numpyro_refitting": [
    {
      "source": "import arviz as az\nimport numpyro\nimport numpyro.distributions as dist\nimport jax.random as random\nfrom numpyro.infer import MCMC, NUTS\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport xarray as xr",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "scipy",
            "stats"
          ],
          "code_str": "scipy.stats",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "scipy.stats"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "numpyro.set_host_device_count(4)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "plt.plot(xdata, ydata)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "def model(N, x, y=None):\n    b0 = numpyro.sample(\"b0\", dist.Normal(0, 10))\n    b1 = numpyro.sample(\"b1\", dist.Normal(0, 10))\n    sigma_e = numpyro.sample(\"sigma_e\", dist.HalfNormal(10))\n    numpyro.sample(\"y\", dist.Normal(b0 + b1 * x, sigma_e), obs=y)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "data_dict = {\n    \"N\": len(ydata),\n    \"y\": ydata,\n    \"x\": xdata,\n}\nkernel = NUTS(model)\nsample_kwargs = dict(\n    sampler=kernel, \n    num_warmup=1000, \n    num_samples=1000, \n    num_chains=4, \n    chain_method=\"parallel\"\n)\nmcmc = MCMC(**sample_kwargs)\nmcmc.run(random.PRNGKey(0), **data_dict)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"]}\nidata_kwargs = {\n    \"dims\": dims,\n    \"constant_data\": {\"x\": xdata}\n}\nidata = az.from_numpyro(mcmc, **idata_kwargs)\nidata",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_numpyro"
          ],
          "code_str": "az.from_numpyro",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.from_numpyro"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "class NumPyroSamplingWrapper(az.SamplingWrapper):\n    def __init__(self, model, **kwargs):        \n        self.model_fun = model.sampler.model\n        self.rng_key = kwargs.pop(\"rng_key\", random.PRNGKey(0))\n        \n        super(NumPyroSamplingWrapper, self).__init__(model, **kwargs)\n        \n    def log_likelihood__i(self, excluded_obs, idata__i):\n        samples = {\n            key: values.values.reshape((-1, *values.values.shape[2:]))\n            for key, values \n            in idata__i.posterior.items()\n        }\n        log_likelihood_dict = numpyro.infer.log_likelihood(\n            self.model_fun, samples, **excluded_obs\n        )\n        if len(log_likelihood_dict) > 1:\n            raise ValueError(\"multiple likelihoods found\")\n        data = {}\n        nchains = idata__i.posterior.dims[\"chain\"]\n        ndraws = idata__i.posterior.dims[\"draw\"]\n        for obs_name, log_like in log_likelihood_dict.items():\n            shape = (nchains, ndraws) + log_like.shape[1:]\n            data[obs_name] = np.reshape(log_like.copy(), shape)\n        return az.dict_to_dataset(data)[obs_name]\n    \n    def sample(self, modified_observed_data):\n        self.rng_key, subkey = random.split(self.rng_key)\n        mcmc = MCMC(**self.sample_kwargs)\n        mcmc.run(subkey, **modified_observed_data)\n        return mcmc\n\n    def get_inference_data(self, fit):\n        # Cloned from PyStanSamplingWrapper.\n        idata = az.from_numpyro(mcmc, **self.idata_kwargs)\n        return idata\n    \nclass LinRegWrapper(NumPyroSamplingWrapper):\n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data[\"x\"].values\n        ydata = self.idata_orig.observed_data[\"y\"].values\n        mask = np.isin(np.arange(len(xdata)), idx)\n        data__i = {\"x\": xdata[~mask], \"y\": ydata[~mask], \"N\": len(ydata[~mask])}\n        data_ex = {\"x\": xdata[mask], \"y\": ydata[mask], \"N\": len(ydata[mask])}\n        return data__i, data_ex",
      "names": [
        {
          "import_components": [
            "arviz",
            "SamplingWrapper"
          ],
          "code_str": "az.SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.base.SamplingWrapper"
        },
        {
          "import_components": [
            "numpy",
            "reshape"
          ],
          "code_str": "np.reshape",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.reshape"
        },
        {
          "import_components": [
            "arviz",
            "dict_to_dataset"
          ],
          "code_str": "az.dict_to_dataset",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "arviz.dict_to_dataset"
        },
        {
          "import_components": [
            "arviz",
            "from_numpyro"
          ],
          "code_str": "az.from_numpyro",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "arviz.from_numpyro"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "isin"
          ],
          "code_str": "np.isin",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "numpy.isin"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "numpyro_wrapper = LinRegWrapper(\n    mcmc, \n    rng_key=random.PRNGKey(5),\n    idata_orig=idata, \n    sample_kwargs=sample_kwargs, \n    idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_relooed = az.reloo(numpyro_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      }
    }
  ],
  "user_guide/numpyro_refitting_xr_lik": [
    {
      "source": "import arviz as az\nimport numpyro\nimport numpyro.distributions as dist\nimport jax.random as random\nfrom numpyro.infer import MCMC, NUTS\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport xarray as xr",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "scipy",
            "stats"
          ],
          "code_str": "scipy.stats",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "scipy.stats"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "numpyro.set_host_device_count(4)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "plt.plot(xdata, ydata)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "def model(N, x, y=None):\n    b0 = numpyro.sample(\"b0\", dist.Normal(0, 10))\n    b1 = numpyro.sample(\"b1\", dist.Normal(0, 10))\n    sigma_e = numpyro.sample(\"sigma_e\", dist.HalfNormal(10))\n    numpyro.sample(\"y\", dist.Normal(b0 + b1 * x, sigma_e), obs=y)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "data_dict = {\n    \"N\": len(ydata),\n    \"y\": ydata,\n    \"x\": xdata,\n}\nkernel = NUTS(model)\nsample_kwargs = dict(\n    sampler=kernel, \n    num_warmup=1000, \n    num_samples=1000, \n    num_chains=4, \n    chain_method=\"parallel\"\n)\nmcmc = MCMC(**sample_kwargs)\nmcmc.run(random.PRNGKey(0), **data_dict)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"]}\nidata_kwargs = {\n    \"dims\": dims,\n    \"constant_data\": {\"x\": xdata}\n}\nidata = az.from_numpyro(mcmc, **idata_kwargs)\ndel idata.log_likelihood\nidata",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_numpyro"
          ],
          "code_str": "az.from_numpyro",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.from_numpyro"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "def calculate_log_lik(x, y, b0, b1, sigma_e):\n    mu = b0 + b1 * x\n    return stats.norm(mu, sigma_e).logpdf(y)",
      "names": [
        {
          "import_components": [
            "scipy",
            "stats",
            "norm"
          ],
          "code_str": "stats.norm",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.stats.norm"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "log_lik = xr.apply_ufunc(\n    calculate_log_lik,\n    idata.constant_data[\"x\"],\n    idata.observed_data[\"y\"],\n    idata.posterior[\"b0\"],\n    idata.posterior[\"b1\"],\n    idata.posterior[\"sigma_e\"],\n)\nidata.add_groups(log_likelihood=log_lik)",
      "names": [
        {
          "import_components": [
            "xarray",
            "apply_ufunc"
          ],
          "code_str": "xr.apply_ufunc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xarray.apply_ufunc"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "calculate_log_lik(\n    idata.constant_data[\"x\"].values,\n    idata.observed_data[\"y\"].values,\n    idata.posterior[\"b0\"].values,\n    idata.posterior[\"b1\"].values,\n    idata.posterior[\"sigma_e\"].values\n)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "idata",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "class NumPyroSamplingWrapper(az.SamplingWrapper):\n    def __init__(self, model, **kwargs):        \n        self.rng_key = kwargs.pop(\"rng_key\", random.PRNGKey(0))\n        \n        super(NumPyroSamplingWrapper, self).__init__(model, **kwargs)\n    \n    def sample(self, modified_observed_data):\n        self.rng_key, subkey = random.split(self.rng_key)\n        mcmc = MCMC(**self.sample_kwargs)\n        mcmc.run(subkey, **modified_observed_data)\n        return mcmc\n\n    def get_inference_data(self, fit):\n        # Cloned from PyStanSamplingWrapper.\n        idata = az.from_numpyro(mcmc, **self.idata_kwargs)\n        return idata\n    \nclass LinRegWrapper(NumPyroSamplingWrapper):\n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data[\"x\"]\n        ydata = self.idata_orig.observed_data[\"y\"]\n        mask = np.isin(np.arange(len(xdata)), idx)\n        # data__i is passed to numpyro to sample on it -> dict of numpy array\n        # data_ex is passed to apply_ufunc -> list of DataArray\n        data__i = {\"x\": xdata[~mask].values, \"y\": ydata[~mask].values, \"N\": len(ydata[~mask])}\n        data_ex = [xdata[mask], ydata[mask]]\n        return data__i, data_ex\n",
      "names": [
        {
          "import_components": [
            "arviz",
            "SamplingWrapper"
          ],
          "code_str": "az.SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.base.SamplingWrapper"
        },
        {
          "import_components": [
            "arviz",
            "from_numpyro"
          ],
          "code_str": "az.from_numpyro",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "arviz.from_numpyro"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "isin"
          ],
          "code_str": "np.isin",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.isin"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "pystan_wrapper = LinRegWrapper(\n    mcmc, \n    rng_key=random.PRNGKey(7),\n    log_lik_fun=calculate_log_lik, \n    posterior_vars=(\"b0\", \"b1\", \"sigma_e\"),\n    idata_orig=idata, \n    sample_kwargs=sample_kwargs, \n    idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_relooed = az.reloo(pystan_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      }
    }
  ],
  "user_guide/plots_arguments_guide": [
    {
      "source": "import arviz as az\ndata = az.load_arviz_data('centered_eight');\nnon_centered = az.load_arviz_data('non_centered_eight');",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "plots-arguments-guide",
        "headings": [
          "Plots\u2019 arguments guide"
        ]
      }
    },
    {
      "source": "az.plot_posterior(data);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "var-names",
        "headings": [
          "Plots\u2019 arguments guide",
          "var_names"
        ]
      }
    },
    {
      "source": "az.plot_posterior(data, var_names=['mu']);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "var-names",
        "headings": [
          "Plots\u2019 arguments guide",
          "var_names"
        ]
      }
    },
    {
      "source": "az.plot_posterior(data, var_names=['mu', 'tau']);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "var-names",
        "headings": [
          "Plots\u2019 arguments guide",
          "var_names"
        ]
      }
    },
    {
      "source": "az.plot_posterior(data, var_names=['mu', '^the'], filter_vars=\"regex\");",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "var-names",
        "headings": [
          "Plots\u2019 arguments guide",
          "var_names"
        ]
      }
    },
    {
      "source": "az.plot_posterior(data, var_names=['mu']);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "filter-vars",
        "headings": [
          "Plots\u2019 arguments guide",
          "filter_vars"
        ]
      }
    },
    {
      "source": "az.plot_posterior(data, var_names=['mu', '^the'], filter_vars=\"like\");",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "filter-vars",
        "headings": [
          "Plots\u2019 arguments guide",
          "filter_vars"
        ]
      }
    },
    {
      "source": "az.plot_posterior(data, var_names=['mu', '^the'], filter_vars=\"regex\");",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "filter-vars",
        "headings": [
          "Plots\u2019 arguments guide",
          "filter_vars"
        ]
      }
    },
    {
      "source": "coords = {\"school\": [\"Choate\",\"Phillips Exeter\"]};\naz.plot_posterior(data, var_names=[\"mu\", \"theta\"], coords=coords);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "coords",
        "headings": [
          "Plots\u2019 arguments guide",
          "coords"
        ]
      }
    },
    {
      "source": "az.plot_density([data, non_centered], grid=(4, 5));",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "grid",
        "headings": [
          "Plots\u2019 arguments guide",
          "grid"
        ]
      }
    }
  ],
  "user_guide/plotting": [],
  "user_guide/pymc3_refitting": [
    {
      "source": "import arviz as az\nimport pymc3 as pm\nimport numpy as np\nimport matplotlib.pyplot as plt",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "plt.plot(xdata, ydata);",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "def compile_linreg_model(xdata, ydata):\n    with pm.Model() as model:\n        b0 = pm.Normal(\"b0\", 0, 10)\n        b1 = pm.Normal(\"b1\", 0, 10)\n        sigma_e = pm.HalfNormal(\"sigma_e\", 10)\n\n        y = pm.Normal(\"y\", b0 + b1 * xdata, sigma_e, observed=ydata)\n    return model",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "sample_kwargs = {\"draws\": 500, \"tune\": 500, \"chains\": 4}\nwith compile_linreg_model(xdata, ydata) as linreg_model:\n    trace = pm.sample(**sample_kwargs)",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "dims = {\"y\": [\"time\"]}\nidata_kwargs = {\n    \"dims\": dims,\n}\nidata = az.from_pymc3(trace, model=linreg_model, **idata_kwargs)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "class PyMC3LinRegWrapper(az.SamplingWrapper):\n    def __init__(self, xdata, ydata, **kwargs):\n        super(PyMC3LinRegWrapper, self).__init__(**kwargs)\n\n        self.xdata = xdata\n        self.ydata = ydata\n        \n    def sample(self, modified_observed_data):\n        with self.model(**modified_observed_data) as linreg_model:\n            trace = pm.sample(\n                **self.sample_kwargs, \n                return_inferencedata=False, \n                idata_kwargs={\"log_likelihood\": False}\n            )\n        self.pymc3_model = linreg_model\n        return trace\n    \n    def get_inference_data(self, trace):\n        idata = az.from_pymc3(trace, model=self.pymc3_model, **self.idata_kwargs)\n        idata.pymc3_trace = trace\n        return idata\n        \n    def log_likelihood__i(self, excluded_observed_data, idata__i):\n        model_ex = compile_linreg_model(**excluded_observed_data)\n        log_lik__i = az.from_pymc3(idata__i.pymc3_trace, model=model_ex).log_likelihood[\"y\"]\n        return log_lik__i\n        \n    def sel_observations(self, idx):\n        mask = np.isin(np.arange(len(self.xdata)), idx)\n        data_dict = {\"xdata\": self.xdata, \"ydata\": self.ydata}\n        data__i = {key: value[~mask] for key, value in data_dict.items()}\n        data_ex = {key: value[mask] for key, value in data_dict.items()}\n        return data__i, data_ex",
      "names": [
        {
          "import_components": [
            "arviz",
            "SamplingWrapper"
          ],
          "code_str": "az.SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.base.SamplingWrapper"
        },
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        },
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "isin"
          ],
          "code_str": "np.isin",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "numpy.isin"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "pymc3_wrapper = PyMC3LinRegWrapper(\n    model=compile_linreg_model, xdata=xdata, ydata=ydata, sample_kwargs=sample_kwargs, idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_relooed = az.reloo(pymc3_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      }
    }
  ],
  "user_guide/pymc3_refitting_xr_lik": [
    {
      "source": "import arviz as az\nimport pymc3 as pm\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport xarray as xr",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "scipy",
            "stats"
          ],
          "code_str": "scipy.stats",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "scipy.stats"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "plt.plot(xdata, ydata);",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "def compile_linreg_model(xdata, ydata):\n    with pm.Model() as model:\n        x = pm.Data(\"x\", xdata)\n        b0 = pm.Normal(\"b0\", 0, 10)\n        b1 = pm.Normal(\"b1\", 0, 10)\n        sigma_e = pm.HalfNormal(\"sigma_e\", 10)\n\n        y = pm.Normal(\"y\", b0 + b1 * x, sigma_e, observed=ydata)\n    return model",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "sample_kwargs = {\"draws\": 500, \"tune\": 500, \"chains\": 4}\nwith compile_linreg_model(xdata, ydata) as linreg_model:\n    trace = pm.sample(**sample_kwargs)",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"]}\nidata_kwargs = {\n    \"dims\": dims,\n    \"log_likelihood\": False,\n}\nidata = az.from_pymc3(trace, model=linreg_model, **idata_kwargs)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "idata",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "def calculate_log_lik(x, y, b0, b1, sigma_e):\n    mu = b0 + b1 * x\n    return stats.norm(mu, sigma_e).logpdf(y)",
      "names": [
        {
          "import_components": [
            "scipy",
            "stats",
            "norm"
          ],
          "code_str": "stats.norm",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.stats.norm"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "log_lik = xr.apply_ufunc(\n    calculate_log_lik,\n    idata.constant_data[\"x\"],\n    idata.observed_data[\"y\"],\n    idata.posterior[\"b0\"],\n    idata.posterior[\"b1\"],\n    idata.posterior[\"sigma_e\"],\n)\nidata.add_groups(log_likelihood=log_lik)",
      "names": [
        {
          "import_components": [
            "xarray",
            "apply_ufunc"
          ],
          "code_str": "xr.apply_ufunc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xarray.apply_ufunc"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "calculate_log_lik(\n    idata.constant_data[\"x\"].values,\n    idata.observed_data[\"y\"].values,\n    idata.posterior[\"b0\"].values,\n    idata.posterior[\"b1\"].values,\n    idata.posterior[\"sigma_e\"].values\n)",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "idata",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "class PyMC3LinRegWrapper(az.SamplingWrapper):        \n    def sample(self, modified_observed_data):\n        with self.model(*modified_observed_data) as linreg_model:\n            idata = pm.sample(\n                **self.sample_kwargs, \n                return_inferencedata=True, \n                idata_kwargs=self.idata_kwargs\n            )\n        return idata\n    \n    def get_inference_data(self, idata):\n        return idata\n        \n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data[\"x\"]\n        ydata = self.idata_orig.observed_data[\"y\"]\n        mask = np.isin(np.arange(len(xdata)), idx)\n        data__i = [ary[~mask] for ary in (xdata, ydata)]\n        data_ex = [ary[mask] for ary in (xdata, ydata)]\n        return data__i, data_ex",
      "names": [
        {
          "import_components": [
            "arviz",
            "SamplingWrapper"
          ],
          "code_str": "az.SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.base.SamplingWrapper"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "isin"
          ],
          "code_str": "np.isin",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.isin"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "pymc3_wrapper = PyMC3LinRegWrapper(\n    model=compile_linreg_model, \n    log_lik_fun=calculate_log_lik, \n    posterior_vars=(\"b0\", \"b1\", \"sigma_e\"),\n    idata_orig=idata,\n    sample_kwargs=sample_kwargs, \n    idata_kwargs=idata_kwargs,\n)",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_relooed = az.reloo(pymc3_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      }
    }
  ],
  "user_guide/pystan2_refitting": [
    {
      "source": "import arviz as az\nimport pystan\nimport numpy as np\nimport matplotlib.pyplot as plt",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "plt.plot(xdata, ydata)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "refit_lr_code = \"\"\"\ndata {\n  // Define data for fitting\n  int<lower=0> N;\n  vector[N] x;\n  vector[N] y;\n  // Define excluded data. It will not be used when fitting.\n  int<lower=0> N_ex;\n  vector[N_ex] x_ex;\n  vector[N_ex] y_ex;\n}\n\nparameters {\n  real b0;\n  real b1;\n  real<lower=0> sigma_e;\n}\n\nmodel {\n  b0 ~ normal(0, 10);\n  b1 ~ normal(0, 10);\n  sigma_e ~ normal(0, 10);\n  for (i in 1:N) {\n    y[i] ~ normal(b0 + b1 * x[i], sigma_e);  // use only data for fitting\n  }\n  \n}\n\ngenerated quantities {\n    vector[N] log_lik;\n    vector[N_ex] log_lik_ex;\n    vector[N] y_hat;\n    \n    for (i in 1:N) {\n        // calculate log likelihood and posterior predictive, there are \n        // no restrictions on adding more generated quantities\n        log_lik[i] = normal_lpdf(y[i] | b0 + b1 * x[i], sigma_e);\n        y_hat[i] = normal_rng(b0 + b1 * x[i], sigma_e);\n    }\n    for (j in 1:N_ex) {\n        // calculate the log likelihood of the excluded data given data_for_fitting\n        log_lik_ex[j] = normal_lpdf(y_ex[j] | b0 + b1 * x_ex[j], sigma_e);\n    }\n}\n\"\"\"",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "sm = pystan.StanModel(model_code=refit_lr_code)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "data_dict = {\n    \"N\": len(ydata),\n    \"y\": ydata,\n    \"x\": xdata,\n    # No excluded data in initial fit\n    \"N_ex\": 0,\n    \"x_ex\": [],\n    \"y_ex\": [],\n}\nsample_kwargs = {\"iter\": 1000, \"chains\": 4}\nfit = sm.sampling(data=data_dict, **sample_kwargs)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"], \"log_likelihood\": [\"time\"], \"y_hat\": [\"time\"]}\nidata_kwargs = {\n    \"posterior_predictive\": [\"y_hat\"],\n    \"observed_data\": \"y\",\n    \"constant_data\": \"x\",\n    \"log_likelihood\": [\"log_lik\", \"log_lik_ex\"],\n    \"dims\": dims,\n}\nidata = az.from_pystan(posterior=fit, **idata_kwargs)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "class LinearRegressionWrapper(az.PyStan2SamplingWrapper):\n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data.x.values\n        ydata = self.idata_orig.observed_data.y.values\n        mask = np.full_like(xdata, True, dtype=bool)\n        mask[idx] = False\n        N_obs = len(mask)\n        N_ex = np.sum(~mask)\n        observations = {\n            \"N\": N_obs - N_ex,\n            \"x\": xdata[mask],\n            \"y\": ydata[mask],\n            \"N_ex\": N_ex,\n            \"x_ex\": xdata[~mask],\n            \"y_ex\": ydata[~mask],\n        }\n        return observations, \"log_lik_ex\"",
      "names": [
        {
          "import_components": [
            "arviz",
            "PyStan2SamplingWrapper"
          ],
          "code_str": "az.PyStan2SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.wrap_stan.PyStan2SamplingWrapper"
        },
        {
          "import_components": [
            "numpy",
            "full_like"
          ],
          "code_str": "np.full_like",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.full_like"
        },
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.sum"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "pystan_wrapper = LinearRegressionWrapper(\n    sm, idata_orig=idata, sample_kwargs=sample_kwargs, idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_relooed = az.reloo(pystan_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      }
    }
  ],
  "user_guide/pystan2_refitting_xr_lik": [
    {
      "source": "import arviz as az\nimport pystan\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport xarray as xr",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "scipy",
            "stats"
          ],
          "code_str": "scipy.stats",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "scipy.stats"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "plt.plot(xdata, ydata)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "refit_lr_code = \"\"\"\ndata {\n  // Define data for fitting\n  int<lower=0> N;\n  vector[N] x;\n  vector[N] y;\n}\n\nparameters {\n  real b0;\n  real b1;\n  real<lower=0> sigma_e;\n}\n\nmodel {\n  b0 ~ normal(0, 10);\n  b1 ~ normal(0, 10);\n  sigma_e ~ normal(0, 10);\n  for (i in 1:N) {\n    y[i] ~ normal(b0 + b1 * x[i], sigma_e);  // use only data for fitting\n  }\n  \n}\n\ngenerated quantities {\n    vector[N] y_hat;\n    \n    for (i in 1:N) {\n        // pointwise log likelihood will be calculated outside Stan, \n        // posterior predictive however will be generated here, there are \n        // no restrictions on adding more generated quantities\n        y_hat[i] = normal_rng(b0 + b1 * x[i], sigma_e);\n    }\n}\n\"\"\"",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "sm = pystan.StanModel(model_code=refit_lr_code)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "data_dict = {\n    \"N\": len(ydata),\n    \"y\": ydata,\n    \"x\": xdata,\n}\nsample_kwargs = {\"iter\": 1000, \"chains\": 4}\nfit = sm.sampling(data=data_dict, **sample_kwargs)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"], \"y_hat\": [\"time\"]}\nidata_kwargs = {\n    \"posterior_predictive\": [\"y_hat\"],\n    \"observed_data\": \"y\",\n    \"constant_data\": \"x\",\n    \"dims\": dims,\n}\nidata = az.from_pystan(posterior=fit, **idata_kwargs)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "def calculate_log_lik(x, y, b0, b1, sigma_e):\n    mu = b0 + b1 * x\n    return stats.norm(mu, sigma_e).logpdf(y)",
      "names": [
        {
          "import_components": [
            "scipy",
            "stats",
            "norm"
          ],
          "code_str": "stats.norm",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.stats.norm"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "log_lik = xr.apply_ufunc(\n    calculate_log_lik,\n    idata.constant_data[\"x\"],\n    idata.observed_data[\"y\"],\n    idata.posterior[\"b0\"],\n    idata.posterior[\"b1\"],\n    idata.posterior[\"sigma_e\"],\n)\nidata.add_groups(log_likelihood=log_lik)",
      "names": [
        {
          "import_components": [
            "xarray",
            "apply_ufunc"
          ],
          "code_str": "xr.apply_ufunc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xarray.apply_ufunc"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "calculate_log_lik(\n    idata.constant_data[\"x\"].values,\n    idata.observed_data[\"y\"].values,\n    idata.posterior[\"b0\"].values,\n    idata.posterior[\"b1\"].values,\n    idata.posterior[\"sigma_e\"].values\n)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "idata",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "class LinearRegressionWrapper(az.SamplingWrapper):\n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data[\"x\"]\n        ydata = self.idata_orig.observed_data[\"y\"]\n        mask = np.isin(np.arange(len(xdata)), idx)\n        data__i = {\"x\": xdata[~mask], \"y\": ydata[~mask], \"N\": len(ydata[~mask])}\n        data_ex = [ary[mask] for ary in (xdata, ydata)]\n        return data__i, data_ex\n    \n    def sample(self, modified_observed_data):\n        #Cloned from PyStan2SamplingWrapper.\n        fit = self.model.sampling(data=modified_observed_data, **self.sample_kwargs)\n        return fit\n\n    def get_inference_data(self, fit):\n        # Cloned from PyStan2SamplingWrapper.\n        idata = az.from_pystan(posterior=fit, **self.idata_kwargs)\n        return idata\n",
      "names": [
        {
          "import_components": [
            "arviz",
            "SamplingWrapper"
          ],
          "code_str": "az.SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.base.SamplingWrapper"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "isin"
          ],
          "code_str": "np.isin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.isin"
        },
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "pystan_wrapper = LinearRegressionWrapper(\n    sm, \n    log_lik_fun=calculate_log_lik, \n    posterior_vars=(\"b0\", \"b1\", \"sigma_e\"),\n    idata_orig=idata, \n    sample_kwargs=sample_kwargs, \n    idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_relooed = az.reloo(pystan_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      }
    }
  ],
  "user_guide/pystan_refitting": [
    {
      "source": "import arviz as az\nimport stan\nimport numpy as np\nimport matplotlib.pyplot as plt",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "# enable PyStan on Jupyter IDE\nimport nest_asyncio\nnest_asyncio.apply()",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "plt.plot(xdata, ydata)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "refit_lr_code = \"\"\"\ndata {\n  // Define data for fitting\n  int<lower=0> N;\n  vector[N] x;\n  vector[N] y;\n  // Define excluded data. It will not be used when fitting.\n  int<lower=0> N_ex;\n  vector[N_ex] x_ex;\n  vector[N_ex] y_ex;\n}\n\nparameters {\n  real b0;\n  real b1;\n  real<lower=0> sigma_e;\n}\n\nmodel {\n  b0 ~ normal(0, 10);\n  b1 ~ normal(0, 10);\n  sigma_e ~ normal(0, 10);\n  for (i in 1:N) {\n    y[i] ~ normal(b0 + b1 * x[i], sigma_e);  // use only data for fitting\n  }\n  \n}\n\ngenerated quantities {\n    vector[N] log_lik;\n    vector[N_ex] log_lik_ex;\n    vector[N] y_hat;\n    \n    for (i in 1:N) {\n        // calculate log likelihood and posterior predictive, there are \n        // no restrictions on adding more generated quantities\n        log_lik[i] = normal_lpdf(y[i] | b0 + b1 * x[i], sigma_e);\n        y_hat[i] = normal_rng(b0 + b1 * x[i], sigma_e);\n    }\n    for (j in 1:N_ex) {\n        // calculate the log likelihood of the excluded data given data_for_fitting\n        log_lik_ex[j] = normal_lpdf(y_ex[j] | b0 + b1 * x_ex[j], sigma_e);\n    }\n}\n\"\"\"",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "data_dict = {\n    \"N\": len(ydata),\n    \"y\": ydata,\n    \"x\": xdata,\n    # No excluded data in initial fit\n    \"N_ex\": 0,\n    \"x_ex\": [],\n    \"y_ex\": [],\n}\nsm = stan.build(program_code=refit_lr_code, data=data_dict)\nsample_kwargs = {\"num_samples\": 1000, \"num_chains\": 4}\nfit = sm.sample(**sample_kwargs)",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"], \"log_likelihood\": [\"time\"], \"y_hat\": [\"time\"]}\nidata_kwargs = {\n    \"posterior_predictive\": [\"y_hat\"],\n    \"observed_data\": \"y\",\n    \"constant_data\": \"x\",\n    \"log_likelihood\": [\"log_lik\", \"log_lik_ex\"],\n    \"dims\": dims,\n}\nidata = az.from_pystan(posterior=fit, posterior_model=sm, **idata_kwargs)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "class LinearRegressionWrapper(az.PyStanSamplingWrapper):\n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data.x.values\n        ydata = self.idata_orig.observed_data.y.values\n        mask = np.full_like(xdata, True, dtype=bool)\n        mask[idx] = False\n        N_obs = len(mask)\n        N_ex = np.sum(~mask)\n        observations = {\n            \"N\": int(N_obs - N_ex),\n            \"x\": xdata[mask],\n            \"y\": ydata[mask],\n            \"N_ex\": int(N_ex),\n            \"x_ex\": xdata[~mask],\n            \"y_ex\": ydata[~mask],\n        }\n        return observations, \"log_lik_ex\"",
      "names": [
        {
          "import_components": [
            "arviz",
            "PyStanSamplingWrapper"
          ],
          "code_str": "az.PyStanSamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.wrap_stan.PyStanSamplingWrapper"
        },
        {
          "import_components": [
            "numpy",
            "full_like"
          ],
          "code_str": "np.full_like",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.full_like"
        },
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.sum"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "pystan_wrapper = LinearRegressionWrapper(\n    refit_lr_code, idata_orig=idata, sample_kwargs=sample_kwargs, idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_relooed = az.reloo(pystan_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      }
    }
  ],
  "user_guide/sampling_wrappers": []
}